{"ast":null,"code":"import { rest } from 'msw';\nexport const handlers = [\n//로그인 POST 요청에 대한 핸들러\nrest.post('/api/login', (req, res, ctx) => {\n  const {\n    username,\n    password\n  } = req.body;\n  // 간단한 로그인 로직 (모킹)\n  if (email === 'admin@naver.com' && password === 'admin123') {\n    return res(ctx.status(200), ctx.json({\n      message: '로그인 성공',\n      token: 'mocked-jwt-token'\n    }));\n  }\n  return res(ctx.status(403), ctx.json({\n    message: '로그인 실패: 잘못된 자격 증명'\n  }));\n}),\n// 다른 API 요청에 대한 예시 핸들러\nrest.get('/user', (req, res, ctx) => {\n  return res(ctx.status(200), ctx.json({\n    username: 'admin',\n    email: 'admin@example.com'\n  }));\n})];","map":{"version":3,"names":["rest","handlers","post","req","res","ctx","username","password","body","email","status","json","message","token","get"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/mocks/handlers.js"],"sourcesContent":["import { rest } from 'msw'\n\nexport const handlers = [\n  //로그인 POST 요청에 대한 핸들러\n  rest.post('/api/login', (req, res, ctx) => {\n    const { username, password } = req.body\n    // 간단한 로그인 로직 (모킹)\n    if (email === 'admin@naver.com' && password === 'admin123') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          message: '로그인 성공',\n          token: 'mocked-jwt-token',\n        }),\n      )\n    }\n    return res(\n      ctx.status(403),\n      ctx.json({\n        message: '로그인 실패: 잘못된 자격 증명',\n      }),\n    )\n  }),\n  // 다른 API 요청에 대한 예시 핸들러\n  rest.get('/user', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        username: 'admin',\n        email: 'admin@example.com',\n      }),\n    )\n  }),\n]\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAE1B,OAAO,MAAMC,QAAQ,GAAG;AACtB;AACAD,IAAI,CAACE,IAAI,CAAC,YAAY,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;EACvC;EACA,IAAIC,KAAK,KAAK,iBAAiB,IAAIF,QAAQ,KAAK,UAAU,EAAE;IAC1D,OAAOH,GAAG,CACRC,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,EACfL,GAAG,CAACM,IAAI,CAAC;MACPC,OAAO,EAAE,QAAQ;MACjBC,KAAK,EAAE;IACT,CAAC,CACH,CAAC;EACH;EACA,OAAOT,GAAG,CACRC,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,EACfL,GAAG,CAACM,IAAI,CAAC;IACPC,OAAO,EAAE;EACX,CAAC,CACH,CAAC;AACH,CAAC,CAAC;AACF;AACAZ,IAAI,CAACc,GAAG,CAAC,OAAO,EAAE,CAACX,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EACnC,OAAOD,GAAG,CACRC,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,EACfL,GAAG,CAACM,IAAI,CAAC;IACPL,QAAQ,EAAE,OAAO;IACjBG,KAAK,EAAE;EACT,CAAC,CACH,CAAC;AACH,CAAC,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}