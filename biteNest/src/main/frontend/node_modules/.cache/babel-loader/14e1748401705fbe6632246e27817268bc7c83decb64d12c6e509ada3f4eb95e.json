{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { userAtom } from '@atoms/user';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthGuard({\n  children\n}) {\n  _s();\n  const [user, setUser] = useRecoilState(userAtom);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const email = localStorage.getItem('email');\n    const nickName = localStorage.getItem('nickName');\n    const id = localStorage.getItem('id');\n    if (token && email && nickName && id) {\n      // 토큰이 있으면 유저 정보를 Recoil로 설정\n      setUser({\n        token,\n        email,\n        nickName,\n        id\n      });\n      console.log('AuthUser', user);\n    } else {\n      // 유저 정보가 없으면 null로 설정\n      setUser(null);\n    }\n  }, [setUser]);\n\n  // AuthGuard는 라우팅을 방해하지 않으므로 children을 그대로 반환\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_s(AuthGuard, \"vwAWJTpHuwHdvzHFmiYagoAWOSM=\", false, function () {\n  return [useRecoilState];\n});\n_c = AuthGuard;\nexport default AuthGuard;\nvar _c;\n$RefreshReg$(_c, \"AuthGuard\");","map":{"version":3,"names":["useEffect","useRecoilState","userAtom","Fragment","_Fragment","jsxDEV","_jsxDEV","AuthGuard","children","_s","user","setUser","token","localStorage","getItem","email","nickName","id","console","log","_c","$RefreshReg$"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/components/auth/AuthGuard.tsx"],"sourcesContent":["import { useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { userAtom } from '@atoms/user'\n\nfunction AuthGuard({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useRecoilState(userAtom)\n\n  useEffect(() => {\n    const token = localStorage.getItem('token')\n    const email = localStorage.getItem('email')\n    const nickName = localStorage.getItem('nickName')\n    const id = localStorage.getItem('id')\n\n    if (token && email && nickName && id) {\n      // 토큰이 있으면 유저 정보를 Recoil로 설정\n      setUser({\n        token,\n        email,\n        nickName,\n        id,\n      })\n      console.log('AuthUser', user)\n    } else {\n      // 유저 정보가 없으면 null로 설정\n      setUser(null)\n    }\n  }, [setUser])\n\n  // AuthGuard는 라우팅을 방해하지 않으므로 children을 그대로 반환\n  return <>{children}</>\n}\n\nexport default AuthGuard\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,QAAQ;AACvC,SAASC,QAAQ,QAAQ,aAAa;AAAA,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,SAASA,CAAC;EAAEC;AAAwC,CAAC,EAAE;EAAAC,EAAA;EAC9D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,cAAc,CAACC,QAAQ,CAAC;EAEhDF,SAAS,CAAC,MAAM;IACd,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAME,QAAQ,GAAGH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,MAAMG,EAAE,GAAGJ,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;IAErC,IAAIF,KAAK,IAAIG,KAAK,IAAIC,QAAQ,IAAIC,EAAE,EAAE;MACpC;MACAN,OAAO,CAAC;QACNC,KAAK;QACLG,KAAK;QACLC,QAAQ;QACRC;MACF,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAET,IAAI,CAAC;IAC/B,CAAC,MAAM;MACL;MACAC,OAAO,CAAC,IAAI,CAAC;IACf;EACF,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;;EAEb;EACA,oBAAOL,OAAA,CAAAF,SAAA;IAAAI,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB;AAACC,EAAA,CA1BQF,SAAS;EAAA,QACQN,cAAc;AAAA;AAAAmB,EAAA,GAD/Bb,SAAS;AA4BlB,eAAeA,SAAS;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}