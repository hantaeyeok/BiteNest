{"ast":null,"code":"var __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { parse } from \"graphql\";\nimport { getPublicUrlFromRequest } from '../request/getPublicUrlFromRequest.mjs';\nimport { devUtils } from './devUtils.mjs';\nimport { jsonParse } from './jsonParse.mjs';\nimport { parseMultipartData } from './parseMultipartData.mjs';\nfunction parseDocumentNode(node) {\n  var _a;\n  const operationDef = node.definitions.find(definition => {\n    return definition.kind === \"OperationDefinition\";\n  });\n  return {\n    operationType: operationDef == null ? void 0 : operationDef.operation,\n    operationName: (_a = operationDef == null ? void 0 : operationDef.name) == null ? void 0 : _a.value\n  };\n}\nfunction parseQuery(query) {\n  try {\n    const ast = parse(query);\n    return parseDocumentNode(ast);\n  } catch (error) {\n    return error;\n  }\n}\nfunction extractMultipartVariables(variables, map, files) {\n  const operations = {\n    variables\n  };\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`);\n    }\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split(\".\").reverse();\n      const paths = reversedPaths.reverse();\n      let target = operations;\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`);\n        }\n        target = target[path];\n      }\n      target[lastPath] = files[key];\n    }\n  }\n  return operations.variables;\n}\nfunction getGraphQLInput(request) {\n  return __async(this, null, function* () {\n    var _a;\n    switch (request.method) {\n      case \"GET\":\n        {\n          const url = new URL(request.url);\n          const query = url.searchParams.get(\"query\");\n          const variables = url.searchParams.get(\"variables\") || \"\";\n          return {\n            query,\n            variables: jsonParse(variables)\n          };\n        }\n      case \"POST\":\n        {\n          const requestClone = request.clone();\n          if ((_a = request.headers.get(\"content-type\")) == null ? void 0 : _a.includes(\"multipart/form-data\")) {\n            const responseJson = parseMultipartData(yield requestClone.text(), request.headers);\n            if (!responseJson) {\n              return null;\n            }\n            const _b = responseJson,\n              {\n                operations,\n                map\n              } = _b,\n              files = __objRest(_b, [\"operations\", \"map\"]);\n            const parsedOperations = jsonParse(operations) || {};\n            if (!parsedOperations.query) {\n              return null;\n            }\n            const parsedMap = jsonParse(map || \"\") || {};\n            const variables = parsedOperations.variables ? extractMultipartVariables(parsedOperations.variables, parsedMap, files) : {};\n            return {\n              query: parsedOperations.query,\n              variables\n            };\n          }\n          const requestJson = yield requestClone.json().catch(() => null);\n          if (requestJson == null ? void 0 : requestJson.query) {\n            const {\n              query,\n              variables\n            } = requestJson;\n            return {\n              query,\n              variables\n            };\n          }\n        }\n      default:\n        return null;\n    }\n  });\n}\nfunction parseGraphQLRequest(request) {\n  return __async(this, null, function* () {\n    const input = yield getGraphQLInput(request);\n    if (!input || !input.query) {\n      return;\n    }\n    const {\n      query,\n      variables\n    } = input;\n    const parsedResult = parseQuery(query);\n    if (parsedResult instanceof Error) {\n      const requestPublicUrl = getPublicUrlFromRequest(request);\n      throw new Error(devUtils.formatMessage('Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s', request.method, requestPublicUrl, parsedResult.message));\n    }\n    return {\n      query: input.query,\n      operationType: parsedResult.operationType,\n      operationName: parsedResult.operationName,\n      variables\n    };\n  });\n}\nexport { parseDocumentNode, parseGraphQLRequest };","map":{"version":3,"names":["__getOwnPropSymbols","Object","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__objRest","source","exclude","target","prop","call","indexOf","__async","__this","__arguments","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","throw","x","done","then","apply","parse","getPublicUrlFromRequest","devUtils","jsonParse","parseMultipartData","parseDocumentNode","node","_a","operationDef","definitions","find","definition","kind","operationType","operation","operationName","name","parseQuery","query","ast","error","extractMultipartVariables","variables","map","files","operations","key","pathArray","entries","Error","dotPath","lastPath","reversedPaths","split","reverse","paths","path","getGraphQLInput","request","method","url","URL","searchParams","get","requestClone","clone","headers","includes","responseJson","text","_b","parsedOperations","parsedMap","requestJson","json","catch","parseGraphQLRequest","input","parsedResult","requestPublicUrl","formatMessage","message"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-7370ac2e06/node_modules/msw/lib/core/utils/internal/parseGraphQLRequest.mjs"],"sourcesContent":["var __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { parse } from \"graphql\";\nimport { getPublicUrlFromRequest } from '../request/getPublicUrlFromRequest.mjs';\nimport { devUtils } from './devUtils.mjs';\nimport { jsonParse } from './jsonParse.mjs';\nimport { parseMultipartData } from './parseMultipartData.mjs';\nfunction parseDocumentNode(node) {\n  var _a;\n  const operationDef = node.definitions.find((definition) => {\n    return definition.kind === \"OperationDefinition\";\n  });\n  return {\n    operationType: operationDef == null ? void 0 : operationDef.operation,\n    operationName: (_a = operationDef == null ? void 0 : operationDef.name) == null ? void 0 : _a.value\n  };\n}\nfunction parseQuery(query) {\n  try {\n    const ast = parse(query);\n    return parseDocumentNode(ast);\n  } catch (error) {\n    return error;\n  }\n}\nfunction extractMultipartVariables(variables, map, files) {\n  const operations = { variables };\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`);\n    }\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split(\".\").reverse();\n      const paths = reversedPaths.reverse();\n      let target = operations;\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`);\n        }\n        target = target[path];\n      }\n      target[lastPath] = files[key];\n    }\n  }\n  return operations.variables;\n}\nfunction getGraphQLInput(request) {\n  return __async(this, null, function* () {\n    var _a;\n    switch (request.method) {\n      case \"GET\": {\n        const url = new URL(request.url);\n        const query = url.searchParams.get(\"query\");\n        const variables = url.searchParams.get(\"variables\") || \"\";\n        return {\n          query,\n          variables: jsonParse(variables)\n        };\n      }\n      case \"POST\": {\n        const requestClone = request.clone();\n        if ((_a = request.headers.get(\"content-type\")) == null ? void 0 : _a.includes(\"multipart/form-data\")) {\n          const responseJson = parseMultipartData(\n            yield requestClone.text(),\n            request.headers\n          );\n          if (!responseJson) {\n            return null;\n          }\n          const _b = responseJson, { operations, map } = _b, files = __objRest(_b, [\"operations\", \"map\"]);\n          const parsedOperations = jsonParse(\n            operations\n          ) || {};\n          if (!parsedOperations.query) {\n            return null;\n          }\n          const parsedMap = jsonParse(map || \"\") || {};\n          const variables = parsedOperations.variables ? extractMultipartVariables(\n            parsedOperations.variables,\n            parsedMap,\n            files\n          ) : {};\n          return {\n            query: parsedOperations.query,\n            variables\n          };\n        }\n        const requestJson = yield requestClone.json().catch(() => null);\n        if (requestJson == null ? void 0 : requestJson.query) {\n          const { query, variables } = requestJson;\n          return {\n            query,\n            variables\n          };\n        }\n      }\n      default:\n        return null;\n    }\n  });\n}\nfunction parseGraphQLRequest(request) {\n  return __async(this, null, function* () {\n    const input = yield getGraphQLInput(request);\n    if (!input || !input.query) {\n      return;\n    }\n    const { query, variables } = input;\n    const parsedResult = parseQuery(query);\n    if (parsedResult instanceof Error) {\n      const requestPublicUrl = getPublicUrlFromRequest(request);\n      throw new Error(\n        devUtils.formatMessage(\n          'Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s',\n          request.method,\n          requestPublicUrl,\n          parsedResult.message\n        )\n      );\n    }\n    return {\n      query: input.query,\n      operationType: parsedResult.operationType,\n      operationName: parsedResult.operationName,\n      variables\n    };\n  });\n}\nexport {\n  parseDocumentNode,\n  parseGraphQLRequest\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}