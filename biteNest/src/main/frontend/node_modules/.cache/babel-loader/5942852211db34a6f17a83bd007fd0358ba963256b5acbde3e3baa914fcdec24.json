{"ast":null,"code":"var _jsxFileName = \"/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/components/auth/PrivateRoute.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useRecoilValue } from 'recoil';\nimport { userAtom } from '@atoms/user';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  children\n}) => {\n  _s();\n  const user = useRecoilValue(userAtom);\n  const [showAlert, setShowAlert] = useState(false);\n  const [redirect, setRedirect] = useState(false);\n  useEffect(() => {\n    if (!user || !user.token) {\n      // 로그인되지 않은 상태에서 alert을 띄우고 일정 시간 후 리다이렉트 설정\n      setShowAlert(true);\n    }\n  }, [user]);\n  useEffect(() => {\n    if (showAlert) {\n      alert('로그인이 필요합니다. 로그인 페이지로 이동합니다.');\n      setRedirect(true);\n    }\n  }, [showAlert]);\n  if (redirect) {\n    // 일정 시간 후 리다이렉트 처리\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/signin\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (!user || !user.token) {\n    // 아직 리다이렉트 전인 경우 컴포넌트 렌더링 중지\n    return null;\n  }\n\n  // 유저가 인증된 상태에서만 자식 컴포넌트를 렌더링\n  return children;\n};\n_s(PrivateRoute, \"wPxiZLJu9lK2qX1nIyepXDBRbWg=\", false, function () {\n  return [useRecoilValue];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["useState","useEffect","Navigate","useRecoilValue","userAtom","jsxDEV","_jsxDEV","PrivateRoute","children","_s","user","showAlert","setShowAlert","redirect","setRedirect","token","alert","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/components/auth/PrivateRoute.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { useRecoilValue } from 'recoil'\nimport { userAtom } from '@atoms/user'\n\ninterface PrivateRouteProps {\n  children: JSX.Element\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ children }) => {\n  const user = useRecoilValue(userAtom)\n  const [showAlert, setShowAlert] = useState(false)\n  const [redirect, setRedirect] = useState(false)\n\n  useEffect(() => {\n    if (!user || !user.token) {\n      // 로그인되지 않은 상태에서 alert을 띄우고 일정 시간 후 리다이렉트 설정\n      setShowAlert(true)\n    }\n  }, [user])\n\n  useEffect(() => {\n    if (showAlert) {\n      alert('로그인이 필요합니다. 로그인 페이지로 이동합니다.')\n      setRedirect(true)\n    }\n  }, [showAlert])\n\n  if (redirect) {\n    // 일정 시간 후 리다이렉트 처리\n    return <Navigate to=\"/signin\" replace />\n  }\n\n  if (!user || !user.token) {\n    // 아직 리다이렉트 전인 경우 컴포넌트 렌더링 중지\n    return null\n  }\n\n  // 유저가 인증된 상태에서만 자식 컴포넌트를 렌더링\n  return children\n}\n\nexport default PrivateRoute\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,cAAc,QAAQ,QAAQ;AACvC,SAASC,QAAQ,QAAQ,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMtC,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAMC,IAAI,GAAGP,cAAc,CAACC,QAAQ,CAAC;EACrC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,IAAI,IAAI,CAACA,IAAI,CAACK,KAAK,EAAE;MACxB;MACAH,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAEVT,SAAS,CAAC,MAAM;IACd,IAAIU,SAAS,EAAE;MACbK,KAAK,CAAC,6BAA6B,CAAC;MACpCF,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC;EAEf,IAAIE,QAAQ,EAAE;IACZ;IACA,oBAAOP,OAAA,CAACJ,QAAQ;MAACe,EAAE,EAAC,SAAS;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;EAEA,IAAI,CAACZ,IAAI,IAAI,CAACA,IAAI,CAACK,KAAK,EAAE;IACxB;IACA,OAAO,IAAI;EACb;;EAEA;EACA,OAAOP,QAAQ;AACjB,CAAC;AAAAC,EAAA,CA/BKF,YAAyC;EAAA,QAChCJ,cAAc;AAAA;AAAAoB,EAAA,GADvBhB,YAAyC;AAiC/C,eAAeA,YAAY;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}