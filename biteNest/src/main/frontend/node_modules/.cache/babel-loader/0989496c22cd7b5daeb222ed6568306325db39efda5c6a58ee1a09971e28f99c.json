{"ast":null,"code":"import { HttpMethods, HttpHandler } from './handlers/HttpHandler.mjs';\nfunction createHttpHandler(method) {\n  return (path, resolver, options = {}) => {\n    return new HttpHandler(method, path, resolver, options);\n  };\n}\nconst http = {\n  all: createHttpHandler(/.+/),\n  head: createHttpHandler(HttpMethods.HEAD),\n  get: createHttpHandler(HttpMethods.GET),\n  post: createHttpHandler(HttpMethods.POST),\n  put: createHttpHandler(HttpMethods.PUT),\n  delete: createHttpHandler(HttpMethods.DELETE),\n  patch: createHttpHandler(HttpMethods.PATCH),\n  options: createHttpHandler(HttpMethods.OPTIONS)\n};\nexport { http };","map":{"version":3,"names":["HttpMethods","HttpHandler","createHttpHandler","method","path","resolver","options","http","all","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","OPTIONS"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/http.ts"],"sourcesContent":["import {\n  DefaultBodyType,\n  RequestHandlerOptions,\n  ResponseResolver,\n} from './handlers/RequestHandler'\nimport {\n  HttpMethods,\n  HttpHandler,\n  HttpRequestResolverExtras,\n} from './handlers/HttpHandler'\nimport type { Path, PathParams } from './utils/matching/matchRequestUrl'\n\nexport type HttpRequestHandler = <\n  Params extends PathParams<keyof Params> = PathParams,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  // Response body type MUST be undefined by default.\n  // This is how we can distinguish between a handler that\n  // returns plain \"Response\" and the one returning \"HttpResponse\"\n  // to enforce a stricter response body type.\n  ResponseBodyType extends DefaultBodyType = undefined,\n  RequestPath extends Path = Path,\n>(\n  path: RequestPath,\n  resolver: HttpResponseResolver<Params, RequestBodyType, ResponseBodyType>,\n  options?: RequestHandlerOptions,\n) => HttpHandler\n\nexport type HttpResponseResolver<\n  Params extends PathParams<keyof Params> = PathParams,\n  RequestBodyType extends DefaultBodyType = DefaultBodyType,\n  ResponseBodyType extends DefaultBodyType = DefaultBodyType,\n> = ResponseResolver<\n  HttpRequestResolverExtras<Params>,\n  RequestBodyType,\n  ResponseBodyType\n>\n\nfunction createHttpHandler<Method extends HttpMethods | RegExp>(\n  method: Method,\n): HttpRequestHandler {\n  return (path, resolver, options = {}) => {\n    return new HttpHandler(method, path, resolver, options)\n  }\n}\n\n/**\n * A namespace to intercept and mock HTTP requests.\n *\n * @example\n * http.get('/user', resolver)\n * http.post('/post/:id', resolver)\n *\n * @see {@link https://mswjs.io/docs/api/http `http` API reference}\n */\nexport const http = {\n  all: createHttpHandler(/.+/),\n  head: createHttpHandler(HttpMethods.HEAD),\n  get: createHttpHandler(HttpMethods.GET),\n  post: createHttpHandler(HttpMethods.POST),\n  put: createHttpHandler(HttpMethods.PUT),\n  delete: createHttpHandler(HttpMethods.DELETE),\n  patch: createHttpHandler(HttpMethods.PATCH),\n  options: createHttpHandler(HttpMethods.OPTIONS),\n}\n"],"mappings":"AAKA,SACEA,WAAA,EACAC,WAAA,QAEK;AA4BP,SAASC,kBACPC,MAAA,EACoB;EACpB,OAAO,CAACC,IAAA,EAAMC,QAAA,EAAUC,OAAA,GAAU,CAAC,MAAM;IACvC,OAAO,IAAIL,WAAA,CAAYE,MAAA,EAAQC,IAAA,EAAMC,QAAA,EAAUC,OAAO;EACxD;AACF;AAWO,MAAMC,IAAA,GAAO;EAClBC,GAAA,EAAKN,iBAAA,CAAkB,IAAI;EAC3BO,IAAA,EAAMP,iBAAA,CAAkBF,WAAA,CAAYU,IAAI;EACxCC,GAAA,EAAKT,iBAAA,CAAkBF,WAAA,CAAYY,GAAG;EACtCC,IAAA,EAAMX,iBAAA,CAAkBF,WAAA,CAAYc,IAAI;EACxCC,GAAA,EAAKb,iBAAA,CAAkBF,WAAA,CAAYgB,GAAG;EACtCC,MAAA,EAAQf,iBAAA,CAAkBF,WAAA,CAAYkB,MAAM;EAC5CC,KAAA,EAAOjB,iBAAA,CAAkBF,WAAA,CAAYoB,KAAK;EAC1Cd,OAAA,EAASJ,iBAAA,CAAkBF,WAAA,CAAYqB,OAAO;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}