{"ast":null,"code":"var _jsxFileName = \"/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/pages/mypage/Fridge.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios'; // Axios로 API 호출을 관리\n\nimport IngredientItem from '@/components/fridge/shared/ingredientItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FridgePage() {\n  _s();\n  const [ingredients, setIngredients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Postman API로부터 데이터 호출\n    axios.get('https://api.example.com/ingredients') // 실제 API 경로로 대체하세요\n    .then(response => {\n      setIngredients(response.data); // API에서 받은 데이터를 상태에 저장\n      setLoading(false); // 로딩 상태 해제\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setLoading(false); // 로딩 상태 해제\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this); // 데이터 로딩 중일 때 보여줄 메시지\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-4\",\n      children: ingredients.length > 0 ? ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(IngredientItem, {\n        ingredient: ingredient\n      }, ingredient.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this) // 각각의 재료 아이템을 렌더링\n      ) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uB0C9\\uC7A5\\uACE0\\uC5D0 \\uC800\\uC7A5\\uB41C \\uC7AC\\uB8CC\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this) // 데이터가 없을 때 표시할 메시지\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(FridgePage, \"VUE0jNgbGtP3S37fp9J02yWs2sw=\");\n_c = FridgePage;\nexport default FridgePage;\nvar _c;\n$RefreshReg$(_c, \"FridgePage\");","map":{"version":3,"names":["useEffect","useState","axios","IngredientItem","jsxDEV","_jsxDEV","FridgePage","_s","ingredients","setIngredients","loading","setLoading","get","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","ingredient","id","_c","$RefreshReg$"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/pages/mypage/Fridge.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport axios from 'axios' // Axios로 API 호출을 관리\nimport { Ingredient } from '@models/ingredient'\nimport IngredientItem from '@/components/fridge/shared/ingredientItem'\n\nfunction FridgePage() {\n  const [ingredients, setIngredients] = useState<Ingredient[]>([])\n  const [loading, setLoading] = useState<boolean>(true)\n\n  useEffect(() => {\n    // Postman API로부터 데이터 호출\n    axios\n      .get('https://api.example.com/ingredients') // 실제 API 경로로 대체하세요\n      .then((response) => {\n        setIngredients(response.data) // API에서 받은 데이터를 상태에 저장\n        setLoading(false) // 로딩 상태 해제\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error)\n        setLoading(false) // 로딩 상태 해제\n      })\n  }, [])\n\n  if (loading) {\n    return <div>Loading...</div> // 데이터 로딩 중일 때 보여줄 메시지\n  }\n\n  return (\n    <div>\n      <div className=\"grid grid-cols-1 gap-4\">\n        {ingredients.length > 0 ? (\n          ingredients.map((ingredient) => (\n            <IngredientItem key={ingredient.id} ingredient={ingredient} /> // 각각의 재료 아이템을 렌더링\n          ))\n        ) : (\n          <div>냉장고에 저장된 재료가 없습니다.</div> // 데이터가 없을 때 표시할 메시지\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default FridgePage\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO,EAAC;;AAE1B,OAAOC,cAAc,MAAM,2CAA2C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtE,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAe,EAAE,CAAC;EAChE,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,IAAI,CAAC;EAErDD,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CACFU,GAAG,CAAC,qCAAqC,CAAC,CAAC;IAAA,CAC3CC,IAAI,CAAEC,QAAQ,IAAK;MAClBL,cAAc,CAACK,QAAQ,CAACC,IAAI,CAAC,EAAC;MAC9BJ,UAAU,CAAC,KAAK,CAAC,EAAC;IACpB,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CN,UAAU,CAAC,KAAK,CAAC,EAAC;IACpB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAc,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAAC;EAC/B;EAEA,oBACElB,OAAA;IAAAc,QAAA,eACEd,OAAA;MAAKmB,SAAS,EAAC,wBAAwB;MAAAL,QAAA,EACpCX,WAAW,CAACiB,MAAM,GAAG,CAAC,GACrBjB,WAAW,CAACkB,GAAG,CAAEC,UAAU,iBACzBtB,OAAA,CAACF,cAAc;QAAqBwB,UAAU,EAAEA;MAAW,GAAtCA,UAAU,CAACC,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2B,CAAC,CAAC;MAChE,CAAC,gBAEFlB,OAAA;QAAAc,QAAA,EAAK;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,CAAC;IAC/B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAChB,EAAA,CAnCQD,UAAU;AAAAuB,EAAA,GAAVvB,UAAU;AAqCnB,eAAeA,UAAU;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}