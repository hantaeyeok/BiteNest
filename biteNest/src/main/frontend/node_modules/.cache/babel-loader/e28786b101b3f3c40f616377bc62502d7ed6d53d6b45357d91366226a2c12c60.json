{"ast":null,"code":"import statuses from \"@bundled-es-modules/statuses\";\nconst {\n  message\n} = statuses;\nfunction normalizeResponseInit(init = {}) {\n  const status = init?.status || 200;\n  const statusText = init?.statusText || message[status] || \"\";\n  const headers = new Headers(init?.headers);\n  return {\n    ...init,\n    headers,\n    status,\n    statusText\n  };\n}\nfunction decorateResponse(response, init) {\n  if (init.type) {\n    Object.defineProperty(response, \"type\", {\n      value: init.type,\n      enumerable: true,\n      writable: false\n    });\n  }\n  if (typeof document !== \"undefined\") {\n    const responseCookies = init.headers.get(\"Set-Cookie\")?.split(\",\") || [];\n    for (const cookieString of responseCookies) {\n      document.cookie = cookieString;\n    }\n  }\n  return response;\n}\nexport { decorateResponse, normalizeResponseInit };","map":{"version":3,"names":["statuses","message","normalizeResponseInit","init","status","statusText","headers","Headers","decorateResponse","response","type","Object","defineProperty","value","enumerable","writable","document","responseCookies","get","split","cookieString","cookie"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/utils/HttpResponse/decorators.ts"],"sourcesContent":["import statuses from '@bundled-es-modules/statuses'\nimport type { HttpResponseInit } from '../../HttpResponse'\n\nconst { message } = statuses\n\nexport interface HttpResponseDecoratedInit extends HttpResponseInit {\n  status: number\n  statusText: string\n  headers: Headers\n}\n\nexport function normalizeResponseInit(\n  init: HttpResponseInit = {},\n): HttpResponseDecoratedInit {\n  const status = init?.status || 200\n  const statusText = init?.statusText || message[status] || ''\n  const headers = new Headers(init?.headers)\n\n  return {\n    ...init,\n    headers,\n    status,\n    statusText,\n  }\n}\n\nexport function decorateResponse(\n  response: Response,\n  init: HttpResponseDecoratedInit,\n): Response {\n  // Allow to mock the response type.\n  if (init.type) {\n    Object.defineProperty(response, 'type', {\n      value: init.type,\n      enumerable: true,\n      writable: false,\n    })\n  }\n\n  // Cookie forwarding is only relevant in the browser.\n  if (typeof document !== 'undefined') {\n    // Write the mocked response cookies to the document.\n    // Note that Fetch API Headers will concatenate multiple \"Set-Cookie\"\n    // headers into a single comma-separated string, just as it does\n    // with any other multi-value headers.\n    const responseCookies = init.headers.get('Set-Cookie')?.split(',') || []\n\n    for (const cookieString of responseCookies) {\n      // No need to parse the cookie headers because it's defined\n      // as the valid cookie string to begin with.\n      document.cookie = cookieString\n    }\n  }\n\n  return response\n}\n"],"mappings":"AAAA,OAAOA,QAAA,MAAc;AAGrB,MAAM;EAAEC;AAAQ,IAAID,QAAA;AAQb,SAASE,sBACdC,IAAA,GAAyB,CAAC,GACC;EAC3B,MAAMC,MAAA,GAASD,IAAA,EAAMC,MAAA,IAAU;EAC/B,MAAMC,UAAA,GAAaF,IAAA,EAAME,UAAA,IAAcJ,OAAA,CAAQG,MAAM,KAAK;EAC1D,MAAME,OAAA,GAAU,IAAIC,OAAA,CAAQJ,IAAA,EAAMG,OAAO;EAEzC,OAAO;IACL,GAAGH,IAAA;IACHG,OAAA;IACAF,MAAA;IACAC;EACF;AACF;AAEO,SAASG,iBACdC,QAAA,EACAN,IAAA,EACU;EAEV,IAAIA,IAAA,CAAKO,IAAA,EAAM;IACbC,MAAA,CAAOC,cAAA,CAAeH,QAAA,EAAU,QAAQ;MACtCI,KAAA,EAAOV,IAAA,CAAKO,IAAA;MACZI,UAAA,EAAY;MACZC,QAAA,EAAU;IACZ,CAAC;EACH;EAGA,IAAI,OAAOC,QAAA,KAAa,aAAa;IAKnC,MAAMC,eAAA,GAAkBd,IAAA,CAAKG,OAAA,CAAQY,GAAA,CAAI,YAAY,GAAGC,KAAA,CAAM,GAAG,KAAK,EAAC;IAEvE,WAAWC,YAAA,IAAgBH,eAAA,EAAiB;MAG1CD,QAAA,CAASK,MAAA,GAASD,YAAA;IACpB;EACF;EAEA,OAAOX,QAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}