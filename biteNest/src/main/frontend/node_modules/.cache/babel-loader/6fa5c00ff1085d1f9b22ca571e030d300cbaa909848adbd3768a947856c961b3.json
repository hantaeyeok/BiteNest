{"ast":null,"code":"// src/until.ts\nvar until = async promise => {\n  try {\n    const data = await promise().catch(error => {\n      throw error;\n    });\n    return {\n      error: null,\n      data\n    };\n  } catch (error) {\n    return {\n      error,\n      data: null\n    };\n  }\n};\nexport { until };","map":{"version":3,"names":["until","promise","data","catch","error"],"sources":["/Users/leeyangie/.yarn/berry/cache/@open-draft-until-npm-2.1.0-e27da33c52-10c0.zip/node_modules/@open-draft/until/src/until.ts"],"sourcesContent":["export type AsyncTuple<\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n> =\n  | {\n      error: ErrorType\n      data: null\n    }\n  | { error: null; data: DataType }\n\n/**\n * Gracefully handles a given Promise factory.\n * @example\n * const { error, data } = await until(() => asyncAction())\n */\nexport const until = async <\n  ErrorType extends any = Error,\n  DataType extends any = unknown,\n>(\n  promise: () => Promise<DataType>,\n): Promise<AsyncTuple<ErrorType, DataType>> => {\n  try {\n    const data = await promise().catch((error) => {\n      throw error\n    })\n    return { error: null, data }\n  } catch (error) {\n    return { error, data: null }\n  }\n}\n"],"mappings":";AAeO,IAAMA,KAAA,GAAQ,MAInBC,OAAA,IAC6C;EAC7C,IAAI;IACF,MAAMC,IAAA,GAAO,MAAMD,OAAA,CAAQ,EAAEE,KAAA,CAAOC,KAAA,IAAU;MAC5C,MAAMA,KAAA;IACR,CAAC;IACD,OAAO;MAAEA,KAAA,EAAO;MAAMF;IAAK;EAC7B,SAASE,KAAA,EAAP;IACA,OAAO;MAAEA,KAAA;MAAOF,IAAA,EAAM;IAAK;EAC7B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}