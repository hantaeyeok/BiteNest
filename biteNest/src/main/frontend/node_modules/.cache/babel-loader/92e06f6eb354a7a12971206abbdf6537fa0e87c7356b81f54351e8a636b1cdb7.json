{"ast":null,"code":"function pipeEvents(source, destination) {\n  const rawEmit = source.emit;\n  if (rawEmit._isPiped) {\n    return;\n  }\n  const sourceEmit = function sourceEmit2(event, ...data) {\n    destination.emit(event, ...data);\n    return rawEmit.call(this, event, ...data);\n  };\n  sourceEmit._isPiped = true;\n  source.emit = sourceEmit;\n}\nexport { pipeEvents };","map":{"version":3,"names":["pipeEvents","source","destination","rawEmit","emit","_isPiped","sourceEmit","sourceEmit2","event","data","call"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/utils/internal/pipeEvents.ts"],"sourcesContent":["import { Emitter, EventMap } from 'strict-event-emitter'\n\n/**\n * Pipes all emitted events from one emitter to another.\n */\nexport function pipeEvents<Events extends EventMap>(\n  source: Emitter<Events>,\n  destination: Emitter<Events>,\n): void {\n  const rawEmit: typeof source.emit & { _isPiped?: boolean } = source.emit\n\n  if (rawEmit._isPiped) {\n    return\n  }\n\n  const sourceEmit: typeof source.emit & { _isPiped?: boolean } =\n    function sourceEmit(this: typeof source, event, ...data) {\n      destination.emit(event, ...data)\n      return rawEmit.call(this, event, ...data)\n    }\n\n  sourceEmit._isPiped = true\n\n  source.emit = sourceEmit\n}\n"],"mappings":"AAKO,SAASA,WACdC,MAAA,EACAC,WAAA,EACM;EACN,MAAMC,OAAA,GAAuDF,MAAA,CAAOG,IAAA;EAEpE,IAAID,OAAA,CAAQE,QAAA,EAAU;IACpB;EACF;EAEA,MAAMC,UAAA,GACJ,SAASC,YAAgCC,KAAA,KAAUC,IAAA,EAAM;IACvDP,WAAA,CAAYE,IAAA,CAAKI,KAAA,EAAO,GAAGC,IAAI;IAC/B,OAAON,OAAA,CAAQO,IAAA,CAAK,MAAMF,KAAA,EAAO,GAAGC,IAAI;EAC1C;EAEFH,UAAA,CAAWD,QAAA,GAAW;EAEtBJ,MAAA,CAAOG,IAAA,GAAOE,UAAA;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}