{"ast":null,"code":"var _jsxFileName = \"/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/pages/mypage/Fridge.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios'; // Axios로 API 호출을 관리\n\nimport IngredientItem from '@/components/fridge/shared/ingredientItem';\nimport useUser from '@hooks/auth/useUser';\nimport Button from '@/components/shared/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FridgePage() {\n  _s();\n  const {\n    user\n  } = useUser(); // Recoil 혹은 다른 전역 상태에서 user id 가져오기\n  const [ingredients, setIngredients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (user && user.id) {\n      // Postman API로부터 데이터 호출 - user id를 쿼리 파라미터로 전달\n      axios.get(`https://3ccfb3c6-7a46-4902-b117-a23e940861d2.mock.pstmn.io/api/fridge-ingredients`, {\n        params: {\n          userId: user.id\n        } // userId를 쿼리 파라미터로 넘김\n      }).then(response => {\n        setIngredients(response.data); // API에서 받은 데이터를 상태에 저장\n        setLoading(false); // 로딩 상태 해제\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n        setLoading(false); // 로딩 상태 해제\n      });\n    }\n  }, [user]); // user.id가 변경되면 다시 API 호출\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this); // 데이터 로딩 중일 때 보여줄 메시지\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        label: \"\\uC7AC\\uB8CC \\uB4F1\\uB85D\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-4\",\n      children: ingredients.length > 0 ? ingredients.map(ingredient => /*#__PURE__*/_jsxDEV(IngredientItem, {\n        ingredient: ingredient\n      }, ingredient.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this) // 각각의 재료 아이템을 렌더링\n      ) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uB0C9\\uC7A5\\uACE0\\uC5D0 \\uC800\\uC7A5\\uB41C \\uC7AC\\uB8CC\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) // 데이터가 없을 때 표시할 메시지\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute \",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        label: \"\\uB098\\uC758 \\uB9DE\\uCDA4 \\uB808\\uC2DC\\uD53C\",\n        size: \"full\",\n        color: \"bg-green-100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(FridgePage, \"hVYqcI2HKta3Q7Vhy5VDWs1oJ3w=\", false, function () {\n  return [useUser];\n});\n_c = FridgePage;\nexport default FridgePage;\nvar _c;\n$RefreshReg$(_c, \"FridgePage\");","map":{"version":3,"names":["useEffect","useState","axios","IngredientItem","useUser","Button","jsxDEV","_jsxDEV","FridgePage","_s","user","ingredients","setIngredients","loading","setLoading","id","get","params","userId","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","label","className","length","map","ingredient","size","color","_c","$RefreshReg$"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/pages/mypage/Fridge.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport axios from 'axios' // Axios로 API 호출을 관리\nimport { Ingredient } from '@models/ingredient'\nimport IngredientItem from '@/components/fridge/shared/ingredientItem'\nimport useUser from '@hooks/auth/useUser'\nimport Button from '@/components/shared/Button'\n\nfunction FridgePage() {\n  const { user } = useUser() // Recoil 혹은 다른 전역 상태에서 user id 가져오기\n  const [ingredients, setIngredients] = useState<Ingredient[]>([])\n  const [loading, setLoading] = useState<boolean>(true)\n\n  useEffect(() => {\n    if (user && user.id) {\n      // Postman API로부터 데이터 호출 - user id를 쿼리 파라미터로 전달\n      axios\n        .get(\n          `https://3ccfb3c6-7a46-4902-b117-a23e940861d2.mock.pstmn.io/api/fridge-ingredients`,\n          {\n            params: { userId: user.id }, // userId를 쿼리 파라미터로 넘김\n          },\n        )\n        .then((response) => {\n          setIngredients(response.data) // API에서 받은 데이터를 상태에 저장\n          setLoading(false) // 로딩 상태 해제\n        })\n        .catch((error) => {\n          console.error('Error fetching data:', error)\n          setLoading(false) // 로딩 상태 해제\n        })\n    }\n  }, [user]) // user.id가 변경되면 다시 API 호출\n\n  if (loading) {\n    return <div>Loading...</div> // 데이터 로딩 중일 때 보여줄 메시지\n  }\n\n  return (\n    <div>\n      <div>\n        <Button label=\"재료 등록하기\"></Button>\n      </div>\n      <div className=\"grid grid-cols-1 gap-4\">\n        {ingredients.length > 0 ? (\n          ingredients.map((ingredient) => (\n            <IngredientItem key={ingredient.id} ingredient={ingredient} /> // 각각의 재료 아이템을 렌더링\n          ))\n        ) : (\n          <div>냉장고에 저장된 재료가 없습니다.</div> // 데이터가 없을 때 표시할 메시지\n        )}\n      </div>\n      <div className=\"absolute \">\n        <Button\n          label=\"나의 맞춤 레시피\"\n          size=\"full\"\n          color=\"bg-green-100\"\n        ></Button>\n      </div>\n    </div>\n  )\n}\n\nexport default FridgePage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}