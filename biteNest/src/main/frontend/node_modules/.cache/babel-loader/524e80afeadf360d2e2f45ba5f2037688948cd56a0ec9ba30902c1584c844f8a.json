{"ast":null,"code":"/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n  var tokens = [];\n  var i = 0;\n  while (i < str.length) {\n    var char = str[i];\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({\n        type: \"MODIFIER\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({\n        type: \"ESCAPED_CHAR\",\n        index: i++,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({\n        type: \"OPEN\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({\n        type: \"CLOSE\",\n        index: i,\n        value: str[i++]\n      });\n      continue;\n    }\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n        if (\n        // `0-9`\n        code >= 48 && code <= 57 ||\n        // `A-Z`\n        code >= 65 && code <= 90 ||\n        // `a-z`\n        code >= 97 && code <= 122 ||\n        // `_`\n        code === 95) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name) throw new TypeError(\"Missing parameter name at \".concat(i));\n      tokens.push({\n        type: \"NAME\",\n        index: i,\n        value: name\n      });\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n      if (str[j] === \"?\") {\n        throw new TypeError(\"Pattern cannot start with \\\"?\\\" at \".concat(j));\n      }\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n          }\n        }\n        pattern += str[j++];\n      }\n      if (count) throw new TypeError(\"Unbalanced pattern at \".concat(i));\n      if (!pattern) throw new TypeError(\"Missing pattern at \".concat(i));\n      tokens.push({\n        type: \"PATTERN\",\n        index: i,\n        value: pattern\n      });\n      i = j;\n      continue;\n    }\n    tokens.push({\n      type: \"CHAR\",\n      index: i,\n      value: str[i++]\n    });\n  }\n  tokens.push({\n    type: \"END\",\n    index: i,\n    value: \"\"\n  });\n  return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var tokens = lexer(str);\n  var _a = options.prefixes,\n    prefixes = _a === void 0 ? \"./\" : _a,\n    _b = options.delimiter,\n    delimiter = _b === void 0 ? \"/#?\" : _b;\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n  var tryConsume = function (type) {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n  var mustConsume = function (type) {\n    var value = tryConsume(type);\n    if (value !== undefined) return value;\n    var _a = tokens[i],\n      nextType = _a.type,\n      index = _a.index;\n    throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n  };\n  var consumeText = function () {\n    var result = \"\";\n    var value;\n    while (value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result += value;\n    }\n    return result;\n  };\n  var isSafe = function (value) {\n    for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {\n      var char = delimiter_1[_i];\n      if (value.indexOf(char) > -1) return true;\n    }\n    return false;\n  };\n  var safePattern = function (prefix) {\n    var prev = result[result.length - 1];\n    var prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n    if (prev && !prevText) {\n      throw new TypeError(\"Must have text between two parameters, missing text after \\\"\".concat(prev.name, \"\\\"\"));\n    }\n    if (!prevText || isSafe(prevText)) return \"[^\".concat(escapeString(delimiter), \"]+?\");\n    return \"(?:(?!\".concat(escapeString(prevText), \")[^\").concat(escapeString(delimiter), \"])+?\");\n  };\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n    if (name || pattern) {\n      var prefix = char || \"\";\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n      result.push({\n        name: name || key++,\n        prefix: prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n    var open = tryConsume(\"OPEN\");\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,\n        prefix: prefix,\n        suffix: suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    mustConsume(\"END\");\n  }\n  return result;\n}\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile(str, options) {\n  return tokensToFunction(parse(str, options), options);\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction(tokens, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var reFlags = flags(options);\n  var _a = options.encode,\n    encode = _a === void 0 ? function (x) {\n      return x;\n    } : _a,\n    _b = options.validate,\n    validate = _b === void 0 ? true : _b;\n  // Compile all the tokens into regexps.\n  var matches = tokens.map(function (token) {\n    if (typeof token === \"object\") {\n      return new RegExp(\"^(?:\".concat(token.pattern, \")$\"), reFlags);\n    }\n  });\n  return function (data) {\n    var path = \"\";\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n      var value = data ? data[token.name] : undefined;\n      var optional = token.modifier === \"?\" || token.modifier === \"*\";\n      var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to not repeat, but got an array\"));\n        }\n        if (value.length === 0) {\n          if (optional) continue;\n          throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to not be empty\"));\n        }\n        for (var j = 0; j < value.length; j++) {\n          var segment = encode(value[j], token);\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError(\"Expected all \\\"\".concat(token.name, \"\\\" to match \\\"\").concat(token.pattern, \"\\\", but got \\\"\").concat(segment, \"\\\"\"));\n          }\n          path += token.prefix + segment + token.suffix;\n        }\n        continue;\n      }\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        var segment = encode(String(value), token);\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to match \\\"\").concat(token.pattern, \"\\\", but got \\\"\").concat(segment, \"\\\"\"));\n        }\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n      if (optional) continue;\n      var typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(\"Expected \\\"\".concat(token.name, \"\\\" to be \").concat(typeOfMessage));\n    }\n    return path;\n  };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match(str, options) {\n  var keys = [];\n  var re = pathToRegexp(str, keys, options);\n  return regexpToFunction(re, keys, options);\n}\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction(re, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.decode,\n    decode = _a === void 0 ? function (x) {\n      return x;\n    } : _a;\n  return function (pathname) {\n    var m = re.exec(pathname);\n    if (!m) return false;\n    var path = m[0],\n      index = m.index;\n    var params = Object.create(null);\n    var _loop_1 = function (i) {\n      if (m[i] === undefined) return \"continue\";\n      var key = keys[i - 1];\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    };\n    for (var i = 1; i < m.length; i++) {\n      _loop_1(i);\n    }\n    return {\n      path: path,\n      index: index,\n      params: params\n    };\n  };\n}\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path, keys) {\n  if (!keys) return path;\n  var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n  var index = 0;\n  var execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n  return path;\n}\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function (path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.strict,\n    strict = _a === void 0 ? false : _a,\n    _b = options.start,\n    start = _b === void 0 ? true : _b,\n    _c = options.end,\n    end = _c === void 0 ? true : _c,\n    _d = options.encode,\n    encode = _d === void 0 ? function (x) {\n      return x;\n    } : _d,\n    _e = options.delimiter,\n    delimiter = _e === void 0 ? \"/#?\" : _e,\n    _f = options.endsWith,\n    endsWith = _f === void 0 ? \"\" : _f;\n  var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n  var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n  var route = start ? \"^\" : \"\";\n  // Iterate over the tokens and create our regexp string.\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n      if (token.pattern) {\n        if (keys) keys.push(token);\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n          } else {\n            route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\"Can not repeat \\\"\".concat(token.name, \"\\\" without a prefix and suffix\"));\n          }\n          route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n        }\n      } else {\n        route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n      }\n    }\n  }\n  if (end) {\n    if (!strict) route += \"\".concat(delimiterRe, \"?\");\n    route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === undefined;\n    if (!strict) {\n      route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n    }\n    if (!isEndDelimited) {\n      route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n    }\n  }\n  return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}","map":{"version":3,"names":["lexer","str","tokens","i","length","char","push","type","index","value","name","j","code","charCodeAt","TypeError","concat","count","pattern","parse","options","_a","prefixes","_b","delimiter","result","key","path","tryConsume","mustConsume","undefined","nextType","consumeText","isSafe","_i","delimiter_1","indexOf","safePattern","prefix","prev","prevText","escapeString","suffix","modifier","open","name_1","pattern_1","compile","tokensToFunction","reFlags","flags","encode","x","validate","matches","map","token","RegExp","data","optional","repeat","Array","isArray","segment","test","String","typeOfMessage","match","keys","re","pathToRegexp","regexpToFunction","decode","pathname","m","exec","params","Object","create","split","replace","sensitive","regexpToRegexp","groupsRegex","execResult","source","arrayToRegexp","paths","parts","join","stringToRegexp","tokensToRegexp","strict","start","_c","end","_d","_e","_f","endsWith","endsWithRe","delimiterRe","route","tokens_1","mod","endToken","isEndDelimited"],"sources":["/Users/leeyangie/.yarn/berry/cache/path-to-regexp-npm-6.3.0-ee2cdde576-10c0.zip/node_modules/path-to-regexp/src/index.ts"],"sourcesContent":["/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}