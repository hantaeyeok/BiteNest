{"ast":null,"code":"import { parse } from \"graphql\";\nimport { getPublicUrlFromRequest } from '../request/getPublicUrlFromRequest.mjs';\nimport { devUtils } from './devUtils.mjs';\nimport { jsonParse } from './jsonParse.mjs';\nimport { parseMultipartData } from './parseMultipartData.mjs';\nfunction parseDocumentNode(node) {\n  const operationDef = node.definitions.find(definition => {\n    return definition.kind === \"OperationDefinition\";\n  });\n  return {\n    operationType: operationDef?.operation,\n    operationName: operationDef?.name?.value\n  };\n}\nfunction parseQuery(query) {\n  try {\n    const ast = parse(query);\n    return parseDocumentNode(ast);\n  } catch (error) {\n    return error;\n  }\n}\nfunction extractMultipartVariables(variables, map, files) {\n  const operations = {\n    variables\n  };\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`);\n    }\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split(\".\").reverse();\n      const paths = reversedPaths.reverse();\n      let target = operations;\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`);\n        }\n        target = target[path];\n      }\n      target[lastPath] = files[key];\n    }\n  }\n  return operations.variables;\n}\nasync function getGraphQLInput(request) {\n  switch (request.method) {\n    case \"GET\":\n      {\n        const url = new URL(request.url);\n        const query = url.searchParams.get(\"query\");\n        const variables = url.searchParams.get(\"variables\") || \"\";\n        return {\n          query,\n          variables: jsonParse(variables)\n        };\n      }\n    case \"POST\":\n      {\n        const requestClone = request.clone();\n        if (request.headers.get(\"content-type\")?.includes(\"multipart/form-data\")) {\n          const responseJson = parseMultipartData(await requestClone.text(), request.headers);\n          if (!responseJson) {\n            return null;\n          }\n          const {\n            operations,\n            map,\n            ...files\n          } = responseJson;\n          const parsedOperations = jsonParse(operations) || {};\n          if (!parsedOperations.query) {\n            return null;\n          }\n          const parsedMap = jsonParse(map || \"\") || {};\n          const variables = parsedOperations.variables ? extractMultipartVariables(parsedOperations.variables, parsedMap, files) : {};\n          return {\n            query: parsedOperations.query,\n            variables\n          };\n        }\n        const requestJson = await requestClone.json().catch(() => null);\n        if (requestJson?.query) {\n          const {\n            query,\n            variables\n          } = requestJson;\n          return {\n            query,\n            variables\n          };\n        }\n      }\n    default:\n      return null;\n  }\n}\nasync function parseGraphQLRequest(request) {\n  const input = await getGraphQLInput(request);\n  if (!input || !input.query) {\n    return;\n  }\n  const {\n    query,\n    variables\n  } = input;\n  const parsedResult = parseQuery(query);\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = getPublicUrlFromRequest(request);\n    throw new Error(devUtils.formatMessage('Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s', request.method, requestPublicUrl, parsedResult.message));\n  }\n  return {\n    query: input.query,\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables\n  };\n}\nexport { parseDocumentNode, parseGraphQLRequest };","map":{"version":3,"names":["parse","getPublicUrlFromRequest","devUtils","jsonParse","parseMultipartData","parseDocumentNode","node","operationDef","definitions","find","definition","kind","operationType","operation","operationName","name","value","parseQuery","query","ast","error","extractMultipartVariables","variables","map","files","operations","key","pathArray","Object","entries","Error","dotPath","lastPath","reversedPaths","split","reverse","paths","target","path","getGraphQLInput","request","method","url","URL","searchParams","get","requestClone","clone","headers","includes","responseJson","text","parsedOperations","parsedMap","requestJson","json","catch","parseGraphQLRequest","input","parsedResult","requestPublicUrl","formatMessage","message"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/utils/internal/parseGraphQLRequest.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  OperationDefinitionNode,\n  OperationTypeNode,\n} from 'graphql'\nimport { parse } from 'graphql'\nimport type { GraphQLVariables } from '../../handlers/GraphQLHandler'\nimport { getPublicUrlFromRequest } from '../request/getPublicUrlFromRequest'\nimport { devUtils } from './devUtils'\nimport { jsonParse } from './jsonParse'\nimport { parseMultipartData } from './parseMultipartData'\n\ninterface GraphQLInput {\n  query: string | null\n  variables?: GraphQLVariables\n}\n\nexport interface ParsedGraphQLQuery {\n  operationType: OperationTypeNode\n  operationName?: string\n}\n\nexport type ParsedGraphQLRequest<\n  VariablesType extends GraphQLVariables = GraphQLVariables,\n> =\n  | (ParsedGraphQLQuery & {\n      query: string\n      variables?: VariablesType\n    })\n  | undefined\n\nexport function parseDocumentNode(node: DocumentNode): ParsedGraphQLQuery {\n  const operationDef = node.definitions.find((definition) => {\n    return definition.kind === 'OperationDefinition'\n  }) as OperationDefinitionNode\n\n  return {\n    operationType: operationDef?.operation,\n    operationName: operationDef?.name?.value,\n  }\n}\n\nfunction parseQuery(query: string): ParsedGraphQLQuery | Error {\n  try {\n    const ast = parse(query)\n    return parseDocumentNode(ast)\n  } catch (error) {\n    return error as Error\n  }\n}\n\nexport type GraphQLParsedOperationsMap = Record<string, string[]>\nexport type GraphQLMultipartRequestBody = {\n  operations: string\n  map?: string\n} & {\n  [fileName: string]: File\n}\n\nfunction extractMultipartVariables<VariablesType extends GraphQLVariables>(\n  variables: VariablesType,\n  map: GraphQLParsedOperationsMap,\n  files: Record<string, File>,\n) {\n  const operations = { variables }\n\n  for (const [key, pathArray] of Object.entries(map)) {\n    if (!(key in files)) {\n      throw new Error(`Given files do not have a key '${key}' .`)\n    }\n\n    for (const dotPath of pathArray) {\n      const [lastPath, ...reversedPaths] = dotPath.split('.').reverse()\n      const paths = reversedPaths.reverse()\n      let target: Record<string, any> = operations\n\n      for (const path of paths) {\n        if (!(path in target)) {\n          throw new Error(`Property '${paths}' is not in operations.`)\n        }\n\n        target = target[path]\n      }\n\n      target[lastPath] = files[key]\n    }\n  }\n\n  return operations.variables\n}\n\nasync function getGraphQLInput(request: Request): Promise<GraphQLInput | null> {\n  switch (request.method) {\n    case 'GET': {\n      const url = new URL(request.url)\n      const query = url.searchParams.get('query')\n      const variables = url.searchParams.get('variables') || ''\n\n      return {\n        query,\n        variables: jsonParse(variables),\n      }\n    }\n\n    case 'POST': {\n      // Clone the request so we could read its body without locking\n      // the body stream to the downward consumers.\n      const requestClone = request.clone()\n\n      // Handle multipart body GraphQL operations.\n      if (\n        request.headers.get('content-type')?.includes('multipart/form-data')\n      ) {\n        const responseJson = parseMultipartData<GraphQLMultipartRequestBody>(\n          await requestClone.text(),\n          request.headers,\n        )\n\n        if (!responseJson) {\n          return null\n        }\n\n        const { operations, map, ...files } = responseJson\n        const parsedOperations =\n          jsonParse<{ query?: string; variables?: GraphQLVariables }>(\n            operations,\n          ) || {}\n\n        if (!parsedOperations.query) {\n          return null\n        }\n\n        const parsedMap = jsonParse<GraphQLParsedOperationsMap>(map || '') || {}\n        const variables = parsedOperations.variables\n          ? extractMultipartVariables(\n              parsedOperations.variables,\n              parsedMap,\n              files,\n            )\n          : {}\n\n        return {\n          query: parsedOperations.query,\n          variables,\n        }\n      }\n\n      // Handle plain POST GraphQL operations.\n      const requestJson: {\n        query: string\n        variables?: GraphQLVariables\n        operations?: any /** @todo Annotate this */\n      } = await requestClone.json().catch(() => null)\n\n      if (requestJson?.query) {\n        const { query, variables } = requestJson\n\n        return {\n          query,\n          variables,\n        }\n      }\n    }\n\n    default:\n      return null\n  }\n}\n\n/**\n * Determines if a given request can be considered a GraphQL request.\n * Does not parse the query and does not guarantee its validity.\n */\nexport async function parseGraphQLRequest(\n  request: Request,\n): Promise<ParsedGraphQLRequest> {\n  const input = await getGraphQLInput(request)\n\n  if (!input || !input.query) {\n    return\n  }\n\n  const { query, variables } = input\n  const parsedResult = parseQuery(query)\n\n  if (parsedResult instanceof Error) {\n    const requestPublicUrl = getPublicUrlFromRequest(request)\n\n    throw new Error(\n      devUtils.formatMessage(\n        'Failed to intercept a GraphQL request to \"%s %s\": cannot parse query. See the error message from the parser below.\\n\\n%s',\n        request.method,\n        requestPublicUrl,\n        parsedResult.message,\n      ),\n    )\n  }\n\n  return {\n    query: input.query,\n    operationType: parsedResult.operationType,\n    operationName: parsedResult.operationName,\n    variables,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}