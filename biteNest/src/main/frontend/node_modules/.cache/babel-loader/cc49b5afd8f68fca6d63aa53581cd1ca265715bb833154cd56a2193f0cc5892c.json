{"ast":null,"code":"import { decorateResponse, normalizeResponseInit } from './utils/HttpResponse/decorators.mjs';\nclass HttpResponse extends Response {\n  constructor(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    super(body, responseInit);\n    decorateResponse(this, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/plain\");\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"application/json\");\n    }\n    return new HttpResponse(JSON.stringify(body), responseInit);\n  }\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (!responseInit.headers.has(\"Content-Type\")) {\n      responseInit.headers.set(\"Content-Type\", \"text/xml\");\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer(body, init) {\n    const responseInit = normalizeResponseInit(init);\n    if (body) {\n      responseInit.headers.set(\"Content-Length\", body.byteLength.toString());\n    }\n    return new HttpResponse(body, responseInit);\n  }\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(body, init) {\n    return new HttpResponse(body, normalizeResponseInit(init));\n  }\n}\nexport { HttpResponse };","map":{"version":3,"names":["decorateResponse","normalizeResponseInit","HttpResponse","Response","constructor","body","init","responseInit","text","headers","has","set","json","JSON","stringify","xml","arrayBuffer","byteLength","toString","formData"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/HttpResponse.ts"],"sourcesContent":["import type { DefaultBodyType, JsonBodyType } from './handlers/RequestHandler'\nimport {\n  decorateResponse,\n  normalizeResponseInit,\n} from './utils/HttpResponse/decorators'\n\nexport interface HttpResponseInit extends ResponseInit {\n  type?: ResponseType\n}\n\ndeclare const bodyType: unique symbol\n\nexport interface StrictRequest<BodyType extends DefaultBodyType>\n  extends Request {\n  json(): Promise<BodyType>\n}\n\n/**\n * Opaque `Response` type that supports strict body type.\n */\nexport interface StrictResponse<BodyType extends DefaultBodyType>\n  extends Response {\n  readonly [bodyType]: BodyType\n}\n\n/**\n * A drop-in replacement for the standard `Response` class\n * to allow additional features, like mocking the response `Set-Cookie` header.\n *\n * @example\n * new HttpResponse('Hello world', { status: 201 })\n * HttpResponse.json({ name: 'John' })\n * HttpResponse.formData(form)\n *\n * @see {@link https://mswjs.io/docs/api/http-response `HttpResponse` API reference}\n */\nexport class HttpResponse extends Response {\n  constructor(body?: BodyInit | null, init?: HttpResponseInit) {\n    const responseInit = normalizeResponseInit(init)\n    super(body, responseInit)\n    decorateResponse(this, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"text/plain\"` body.\n   * @example\n   * HttpResponse.text('hello world')\n   * HttpResponse.text('Error', { status: 500 })\n   */\n  static text<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): StrictResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/plain')\n    }\n\n    return new HttpResponse(body, responseInit) as StrictResponse<BodyType>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/json\"` body.\n   * @example\n   * HttpResponse.json({ firstName: 'John' })\n   * HttpResponse.json({ error: 'Not Authorized' }, { status: 401 })\n   */\n  static json<BodyType extends JsonBodyType>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): StrictResponse<BodyType> {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'application/json')\n    }\n\n    return new HttpResponse(\n      JSON.stringify(body),\n      responseInit,\n    ) as StrictResponse<BodyType>\n  }\n\n  /**\n   * Create a `Response` with a `Content-Type: \"application/xml\"` body.\n   * @example\n   * HttpResponse.xml(`<user name=\"John\" />`)\n   * HttpResponse.xml(`<article id=\"abc-123\" />`, { status: 201 })\n   */\n  static xml<BodyType extends string>(\n    body?: BodyType | null,\n    init?: HttpResponseInit,\n  ): Response {\n    const responseInit = normalizeResponseInit(init)\n\n    if (!responseInit.headers.has('Content-Type')) {\n      responseInit.headers.set('Content-Type', 'text/xml')\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with an `ArrayBuffer` body.\n   * @example\n   * const buffer = new ArrayBuffer(3)\n   * const view = new Uint8Array(buffer)\n   * view.set([1, 2, 3])\n   *\n   * HttpResponse.arrayBuffer(buffer)\n   */\n  static arrayBuffer(body?: ArrayBuffer, init?: HttpResponseInit): Response {\n    const responseInit = normalizeResponseInit(init)\n\n    if (body) {\n      responseInit.headers.set('Content-Length', body.byteLength.toString())\n    }\n\n    return new HttpResponse(body, responseInit)\n  }\n\n  /**\n   * Create a `Response` with a `FormData` body.\n   * @example\n   * const data = new FormData()\n   * data.set('name', 'Alice')\n   *\n   * HttpResponse.formData(data)\n   */\n  static formData(body?: FormData, init?: HttpResponseInit): Response {\n    return new HttpResponse(body, normalizeResponseInit(init))\n  }\n}\n"],"mappings":"AACA,SACEA,gBAAA,EACAC,qBAAA,QACK;AAgCA,MAAMC,YAAA,SAAqBC,QAAA,CAAS;EACzCC,YAAYC,IAAA,EAAwBC,IAAA,EAAyB;IAC3D,MAAMC,YAAA,GAAeN,qBAAA,CAAsBK,IAAI;IAC/C,MAAMD,IAAA,EAAME,YAAY;IACxBP,gBAAA,CAAiB,MAAMO,YAAY;EACrC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,OAAOC,KACLH,IAAA,EACAC,IAAA,EAC0B;IAC1B,MAAMC,YAAA,GAAeN,qBAAA,CAAsBK,IAAI;IAE/C,IAAI,CAACC,YAAA,CAAaE,OAAA,CAAQC,GAAA,CAAI,cAAc,GAAG;MAC7CH,YAAA,CAAaE,OAAA,CAAQE,GAAA,CAAI,gBAAgB,YAAY;IACvD;IAEA,OAAO,IAAIT,YAAA,CAAaG,IAAA,EAAME,YAAY;EAC5C;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,OAAOK,KACLP,IAAA,EACAC,IAAA,EAC0B;IAC1B,MAAMC,YAAA,GAAeN,qBAAA,CAAsBK,IAAI;IAE/C,IAAI,CAACC,YAAA,CAAaE,OAAA,CAAQC,GAAA,CAAI,cAAc,GAAG;MAC7CH,YAAA,CAAaE,OAAA,CAAQE,GAAA,CAAI,gBAAgB,kBAAkB;IAC7D;IAEA,OAAO,IAAIT,YAAA,CACTW,IAAA,CAAKC,SAAA,CAAUT,IAAI,GACnBE,YACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,OAAOQ,IACLV,IAAA,EACAC,IAAA,EACU;IACV,MAAMC,YAAA,GAAeN,qBAAA,CAAsBK,IAAI;IAE/C,IAAI,CAACC,YAAA,CAAaE,OAAA,CAAQC,GAAA,CAAI,cAAc,GAAG;MAC7CH,YAAA,CAAaE,OAAA,CAAQE,GAAA,CAAI,gBAAgB,UAAU;IACrD;IAEA,OAAO,IAAIT,YAAA,CAAaG,IAAA,EAAME,YAAY;EAC5C;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,OAAOS,YAAYX,IAAA,EAAoBC,IAAA,EAAmC;IACxE,MAAMC,YAAA,GAAeN,qBAAA,CAAsBK,IAAI;IAE/C,IAAID,IAAA,EAAM;MACRE,YAAA,CAAaE,OAAA,CAAQE,GAAA,CAAI,kBAAkBN,IAAA,CAAKY,UAAA,CAAWC,QAAA,CAAS,CAAC;IACvE;IAEA,OAAO,IAAIhB,YAAA,CAAaG,IAAA,EAAME,YAAY;EAC5C;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,OAAOY,SAASd,IAAA,EAAiBC,IAAA,EAAmC;IAClE,OAAO,IAAIJ,YAAA,CAAaG,IAAA,EAAMJ,qBAAA,CAAsBK,IAAI,CAAC;EAC3D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}