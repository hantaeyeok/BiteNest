{"ast":null,"code":"var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { devUtils } from '../utils/internal/devUtils.mjs';\nimport { isStringEqual } from '../utils/internal/isStringEqual.mjs';\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor.mjs';\nimport { getTimestamp } from '../utils/logging/getTimestamp.mjs';\nimport { serializeRequest } from '../utils/logging/serializeRequest.mjs';\nimport { serializeResponse } from '../utils/logging/serializeResponse.mjs';\nimport { matchRequestUrl } from '../utils/matching/matchRequestUrl.mjs';\nimport { getPublicUrlFromRequest } from '../utils/request/getPublicUrlFromRequest.mjs';\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies.mjs';\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl.mjs';\nimport { RequestHandler } from './RequestHandler.mjs';\nvar HttpMethods = /* @__PURE__ */(HttpMethods2 => {\n  HttpMethods2[\"HEAD\"] = \"HEAD\";\n  HttpMethods2[\"GET\"] = \"GET\";\n  HttpMethods2[\"POST\"] = \"POST\";\n  HttpMethods2[\"PUT\"] = \"PUT\";\n  HttpMethods2[\"PATCH\"] = \"PATCH\";\n  HttpMethods2[\"OPTIONS\"] = \"OPTIONS\";\n  HttpMethods2[\"DELETE\"] = \"DELETE\";\n  return HttpMethods2;\n})(HttpMethods || {});\nclass HttpHandler extends RequestHandler {\n  constructor(method, path, resolver, options) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      resolver,\n      options\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      path\n    } = this.info;\n    if (path instanceof RegExp) {\n      return;\n    }\n    const url = cleanUrl(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(`Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`);\n  }\n  parse(args) {\n    return __async(this, null, function* () {\n      var _a;\n      const url = new URL(args.request.url);\n      const match = matchRequestUrl(url, this.info.path, (_a = args.resolutionContext) == null ? void 0 : _a.baseUrl);\n      const cookies = getAllRequestCookies(args.request);\n      return {\n        match,\n        cookies\n      };\n    });\n  }\n  predicate(args) {\n    const hasMatchingMethod = this.matchMethod(args.request.method);\n    const hasMatchingUrl = args.parsedResult.match.matches;\n    return hasMatchingMethod && hasMatchingUrl;\n  }\n  matchMethod(actualMethod) {\n    return this.info.method instanceof RegExp ? this.info.method.test(actualMethod) : isStringEqual(this.info.method, actualMethod);\n  }\n  extendResolverArgs(args) {\n    var _a;\n    return {\n      params: ((_a = args.parsedResult.match) == null ? void 0 : _a.params) || {},\n      cookies: args.parsedResult.cookies\n    };\n  }\n  log(args) {\n    return __async(this, null, function* () {\n      const publicUrl = getPublicUrlFromRequest(args.request);\n      const loggedRequest = yield serializeRequest(args.request);\n      const loggedResponse = yield serializeResponse(args.response);\n      const statusColor = getStatusCodeColor(loggedResponse.status);\n      console.groupCollapsed(devUtils.formatMessage(\"%s %s %s (%c%s%c)\"), getTimestamp(), args.request.method, publicUrl, `color:${statusColor}`, `${loggedResponse.status} ${loggedResponse.statusText}`, \"color:inherit\");\n      console.log(\"Request\", loggedRequest);\n      console.log(\"Handler:\", this);\n      console.log(\"Response\", loggedResponse);\n      console.groupEnd();\n    });\n  }\n}\nexport { HttpHandler, HttpMethods };","map":{"version":3,"names":["__async","__this","__arguments","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","throw","x","done","then","apply","devUtils","isStringEqual","getStatusCodeColor","getTimestamp","serializeRequest","serializeResponse","matchRequestUrl","getPublicUrlFromRequest","getAllRequestCookies","cleanUrl","getSearchParams","RequestHandler","HttpMethods","HttpMethods2","HttpHandler","constructor","method","path","resolver","options","info","header","checkRedundantQueryParameters","RegExp","url","searchParams","queryParams","forEach","_","paramName","push","warn","parse","args","_a","URL","request","match","resolutionContext","baseUrl","cookies","predicate","hasMatchingMethod","matchMethod","hasMatchingUrl","parsedResult","matches","actualMethod","test","extendResolverArgs","params","log","publicUrl","loggedRequest","loggedResponse","response","statusColor","status","console","groupCollapsed","formatMessage","statusText","groupEnd"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-7370ac2e06/node_modules/msw/lib/core/handlers/HttpHandler.mjs"],"sourcesContent":["var __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { devUtils } from '../utils/internal/devUtils.mjs';\nimport { isStringEqual } from '../utils/internal/isStringEqual.mjs';\nimport { getStatusCodeColor } from '../utils/logging/getStatusCodeColor.mjs';\nimport { getTimestamp } from '../utils/logging/getTimestamp.mjs';\nimport { serializeRequest } from '../utils/logging/serializeRequest.mjs';\nimport { serializeResponse } from '../utils/logging/serializeResponse.mjs';\nimport {\n  matchRequestUrl\n} from '../utils/matching/matchRequestUrl.mjs';\nimport { getPublicUrlFromRequest } from '../utils/request/getPublicUrlFromRequest.mjs';\nimport { getAllRequestCookies } from '../utils/request/getRequestCookies.mjs';\nimport { cleanUrl, getSearchParams } from '../utils/url/cleanUrl.mjs';\nimport {\n  RequestHandler\n} from './RequestHandler.mjs';\nvar HttpMethods = /* @__PURE__ */ ((HttpMethods2) => {\n  HttpMethods2[\"HEAD\"] = \"HEAD\";\n  HttpMethods2[\"GET\"] = \"GET\";\n  HttpMethods2[\"POST\"] = \"POST\";\n  HttpMethods2[\"PUT\"] = \"PUT\";\n  HttpMethods2[\"PATCH\"] = \"PATCH\";\n  HttpMethods2[\"OPTIONS\"] = \"OPTIONS\";\n  HttpMethods2[\"DELETE\"] = \"DELETE\";\n  return HttpMethods2;\n})(HttpMethods || {});\nclass HttpHandler extends RequestHandler {\n  constructor(method, path, resolver, options) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      resolver,\n      options\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const { method, path } = this.info;\n    if (path instanceof RegExp) {\n      return;\n    }\n    const url = cleanUrl(path);\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(\n      `Found a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead and access query parameters in the response resolver function using \"req.url.searchParams\".`\n    );\n  }\n  parse(args) {\n    return __async(this, null, function* () {\n      var _a;\n      const url = new URL(args.request.url);\n      const match = matchRequestUrl(\n        url,\n        this.info.path,\n        (_a = args.resolutionContext) == null ? void 0 : _a.baseUrl\n      );\n      const cookies = getAllRequestCookies(args.request);\n      return {\n        match,\n        cookies\n      };\n    });\n  }\n  predicate(args) {\n    const hasMatchingMethod = this.matchMethod(args.request.method);\n    const hasMatchingUrl = args.parsedResult.match.matches;\n    return hasMatchingMethod && hasMatchingUrl;\n  }\n  matchMethod(actualMethod) {\n    return this.info.method instanceof RegExp ? this.info.method.test(actualMethod) : isStringEqual(this.info.method, actualMethod);\n  }\n  extendResolverArgs(args) {\n    var _a;\n    return {\n      params: ((_a = args.parsedResult.match) == null ? void 0 : _a.params) || {},\n      cookies: args.parsedResult.cookies\n    };\n  }\n  log(args) {\n    return __async(this, null, function* () {\n      const publicUrl = getPublicUrlFromRequest(args.request);\n      const loggedRequest = yield serializeRequest(args.request);\n      const loggedResponse = yield serializeResponse(args.response);\n      const statusColor = getStatusCodeColor(loggedResponse.status);\n      console.groupCollapsed(\n        devUtils.formatMessage(\"%s %s %s (%c%s%c)\"),\n        getTimestamp(),\n        args.request.method,\n        publicUrl,\n        `color:${statusColor}`,\n        `${loggedResponse.status} ${loggedResponse.statusText}`,\n        \"color:inherit\"\n      );\n      console.log(\"Request\", loggedRequest);\n      console.log(\"Handler:\", this);\n      console.log(\"Response\", loggedResponse);\n      console.groupEnd();\n    });\n  }\n}\nexport {\n  HttpHandler,\n  HttpMethods\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}