{"ast":null,"code":"import { invariant } from \"outvariant\";\nimport { Emitter } from \"strict-event-emitter\";\nimport { devUtils } from './utils/internal/devUtils.mjs';\nimport { pipeEvents } from './utils/internal/pipeEvents.mjs';\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray.mjs';\nimport { Disposable } from './utils/internal/Disposable.mjs';\nclass SetupApi extends Disposable {\n  initialHandlers;\n  currentHandlers;\n  emitter;\n  publicEmitter;\n  events;\n  constructor(...initialHandlers) {\n    super();\n    invariant(this.validateHandlers(initialHandlers), devUtils.formatMessage(`Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`));\n    this.initialHandlers = toReadonlyArray(initialHandlers);\n    this.currentHandlers = [...initialHandlers];\n    this.emitter = new Emitter();\n    this.publicEmitter = new Emitter();\n    pipeEvents(this.emitter, this.publicEmitter);\n    this.events = this.createLifeCycleEvents();\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners();\n      this.publicEmitter.removeAllListeners();\n    });\n  }\n  validateHandlers(handlers) {\n    return handlers.every(handler => !Array.isArray(handler));\n  }\n  use(...runtimeHandlers) {\n    invariant(this.validateHandlers(runtimeHandlers), devUtils.formatMessage(`Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`));\n    this.currentHandlers.unshift(...runtimeHandlers);\n  }\n  restoreHandlers() {\n    this.currentHandlers.forEach(handler => {\n      handler.isUsed = false;\n    });\n  }\n  resetHandlers(...nextHandlers) {\n    this.currentHandlers = nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers];\n  }\n  listHandlers() {\n    return toReadonlyArray(this.currentHandlers);\n  }\n  createLifeCycleEvents() {\n    return {\n      on: (...args) => {\n        return this.publicEmitter.on(...args);\n      },\n      removeListener: (...args) => {\n        return this.publicEmitter.removeListener(...args);\n      },\n      removeAllListeners: (...args) => {\n        return this.publicEmitter.removeAllListeners(...args);\n      }\n    };\n  }\n}\nexport { SetupApi };","map":{"version":3,"names":["invariant","Emitter","devUtils","pipeEvents","toReadonlyArray","Disposable","SetupApi","initialHandlers","currentHandlers","emitter","publicEmitter","events","constructor","validateHandlers","formatMessage","createLifeCycleEvents","subscriptions","push","removeAllListeners","handlers","every","handler","Array","isArray","use","runtimeHandlers","unshift","restoreHandlers","forEach","isUsed","resetHandlers","nextHandlers","length","listHandlers","on","args","removeListener"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/SetupApi.ts"],"sourcesContent":["import { invariant } from 'outvariant'\nimport { EventMap, Emitter } from 'strict-event-emitter'\nimport {\n  RequestHandler,\n  RequestHandlerDefaultInfo,\n} from './handlers/RequestHandler'\nimport { LifeCycleEventEmitter } from './sharedOptions'\nimport { devUtils } from './utils/internal/devUtils'\nimport { pipeEvents } from './utils/internal/pipeEvents'\nimport { toReadonlyArray } from './utils/internal/toReadonlyArray'\nimport { Disposable } from './utils/internal/Disposable'\n\n/**\n * Generic class for the mock API setup.\n */\nexport abstract class SetupApi<EventsMap extends EventMap> extends Disposable {\n  protected initialHandlers: ReadonlyArray<RequestHandler>\n  protected currentHandlers: Array<RequestHandler>\n  protected readonly emitter: Emitter<EventsMap>\n  protected readonly publicEmitter: Emitter<EventsMap>\n\n  public readonly events: LifeCycleEventEmitter<EventsMap>\n\n  constructor(...initialHandlers: Array<RequestHandler>) {\n    super()\n\n    invariant(\n      this.validateHandlers(initialHandlers),\n      devUtils.formatMessage(\n        `Failed to apply given request handlers: invalid input. Did you forget to spread the request handlers Array?`,\n      ),\n    )\n\n    this.initialHandlers = toReadonlyArray(initialHandlers)\n    this.currentHandlers = [...initialHandlers]\n\n    this.emitter = new Emitter<EventsMap>()\n    this.publicEmitter = new Emitter<EventsMap>()\n    pipeEvents(this.emitter, this.publicEmitter)\n\n    this.events = this.createLifeCycleEvents()\n\n    this.subscriptions.push(() => {\n      this.emitter.removeAllListeners()\n      this.publicEmitter.removeAllListeners()\n    })\n  }\n\n  private validateHandlers(handlers: ReadonlyArray<RequestHandler>): boolean {\n    // Guard against incorrect call signature of the setup API.\n    return handlers.every((handler) => !Array.isArray(handler))\n  }\n\n  public use(...runtimeHandlers: Array<RequestHandler>): void {\n    invariant(\n      this.validateHandlers(runtimeHandlers),\n      devUtils.formatMessage(\n        `Failed to call \"use()\" with the given request handlers: invalid input. Did you forget to spread the array of request handlers?`,\n      ),\n    )\n\n    this.currentHandlers.unshift(...runtimeHandlers)\n  }\n\n  public restoreHandlers(): void {\n    this.currentHandlers.forEach((handler) => {\n      handler.isUsed = false\n    })\n  }\n\n  public resetHandlers(...nextHandlers: Array<RequestHandler>): void {\n    this.currentHandlers =\n      nextHandlers.length > 0 ? [...nextHandlers] : [...this.initialHandlers]\n  }\n\n  public listHandlers(): ReadonlyArray<\n    RequestHandler<RequestHandlerDefaultInfo, any, any>\n  > {\n    return toReadonlyArray(this.currentHandlers)\n  }\n\n  private createLifeCycleEvents(): LifeCycleEventEmitter<EventsMap> {\n    return {\n      on: (...args: any[]) => {\n        return (this.publicEmitter.on as any)(...args)\n      },\n      removeListener: (...args: any[]) => {\n        return (this.publicEmitter.removeListener as any)(...args)\n      },\n      removeAllListeners: (...args: any[]) => {\n        return this.publicEmitter.removeAllListeners(...args)\n      },\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAA,QAAiB;AAC1B,SAAmBC,OAAA,QAAe;AAMlC,SAASC,QAAA,QAAgB;AACzB,SAASC,UAAA,QAAkB;AAC3B,SAASC,eAAA,QAAuB;AAChC,SAASC,UAAA,QAAkB;AAKpB,MAAeC,QAAA,SAA6CD,UAAA,CAAW;EAClEE,eAAA;EACAC,eAAA;EACSC,OAAA;EACAC,aAAA;EAEHC,MAAA;EAEhBC,YAAA,GAAeL,eAAA,EAAwC;IACrD,MAAM;IAENP,SAAA,CACE,KAAKa,gBAAA,CAAiBN,eAAe,GACrCL,QAAA,CAASY,aAAA,CACP,6GACF,CACF;IAEA,KAAKP,eAAA,GAAkBH,eAAA,CAAgBG,eAAe;IACtD,KAAKC,eAAA,GAAkB,CAAC,GAAGD,eAAe;IAE1C,KAAKE,OAAA,GAAU,IAAIR,OAAA,CAAmB;IACtC,KAAKS,aAAA,GAAgB,IAAIT,OAAA,CAAmB;IAC5CE,UAAA,CAAW,KAAKM,OAAA,EAAS,KAAKC,aAAa;IAE3C,KAAKC,MAAA,GAAS,KAAKI,qBAAA,CAAsB;IAEzC,KAAKC,aAAA,CAAcC,IAAA,CAAK,MAAM;MAC5B,KAAKR,OAAA,CAAQS,kBAAA,CAAmB;MAChC,KAAKR,aAAA,CAAcQ,kBAAA,CAAmB;IACxC,CAAC;EACH;EAEQL,iBAAiBM,QAAA,EAAkD;IAEzE,OAAOA,QAAA,CAASC,KAAA,CAAOC,OAAA,IAAY,CAACC,KAAA,CAAMC,OAAA,CAAQF,OAAO,CAAC;EAC5D;EAEOG,IAAA,GAAOC,eAAA,EAA8C;IAC1DzB,SAAA,CACE,KAAKa,gBAAA,CAAiBY,eAAe,GACrCvB,QAAA,CAASY,aAAA,CACP,gIACF,CACF;IAEA,KAAKN,eAAA,CAAgBkB,OAAA,CAAQ,GAAGD,eAAe;EACjD;EAEOE,gBAAA,EAAwB;IAC7B,KAAKnB,eAAA,CAAgBoB,OAAA,CAASP,OAAA,IAAY;MACxCA,OAAA,CAAQQ,MAAA,GAAS;IACnB,CAAC;EACH;EAEOC,cAAA,GAAiBC,YAAA,EAA2C;IACjE,KAAKvB,eAAA,GACHuB,YAAA,CAAaC,MAAA,GAAS,IAAI,CAAC,GAAGD,YAAY,IAAI,CAAC,GAAG,KAAKxB,eAAe;EAC1E;EAEO0B,aAAA,EAEL;IACA,OAAO7B,eAAA,CAAgB,KAAKI,eAAe;EAC7C;EAEQO,sBAAA,EAA0D;IAChE,OAAO;MACLmB,EAAA,EAAIA,CAAA,GAAIC,IAAA,KAAgB;QACtB,OAAQ,KAAKzB,aAAA,CAAcwB,EAAA,CAAW,GAAGC,IAAI;MAC/C;MACAC,cAAA,EAAgBA,CAAA,GAAID,IAAA,KAAgB;QAClC,OAAQ,KAAKzB,aAAA,CAAc0B,cAAA,CAAuB,GAAGD,IAAI;MAC3D;MACAjB,kBAAA,EAAoBA,CAAA,GAAIiB,IAAA,KAAgB;QACtC,OAAO,KAAKzB,aAAA,CAAcQ,kBAAA,CAAmB,GAAGiB,IAAI;MACtD;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}