{"ast":null,"code":"import { rest } from 'msw';\nexport const handlers = [\n  // 로그인 POST 요청에 대한 핸들러\n  // rest.post('/api/login', (req, res, ctx) => {\n  //   const { username, password } = req.body\n  //   // 간단한 로그인 로직 (모킹)\n  //   if (username === 'admin' && password === 'admin123') {\n  //     return res(\n  //       ctx.status(200),\n  //       ctx.json({\n  //         message: '로그인 성공',\n  //         token: 'mocked-jwt-token',\n  //       }),\n  //     )\n  //   }\n  //   return res(\n  //     ctx.status(403),\n  //     ctx.json({\n  //       message: '로그인 실패: 잘못된 자격 증명',\n  //     }),\n  //   )\n  // }),\n  // // 다른 API 요청에 대한 예시 핸들러\n  // rest.get('/user', (req, res, ctx) => {\n  //   return res(\n  //     ctx.status(200),\n  //     ctx.json({\n  //       username: 'admin',\n  //       email: 'admin@example.com',\n  //     }),\n  //   )\n  // }),\n];","map":{"version":3,"names":["rest","handlers"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/src/mocks/handlers.js"],"sourcesContent":["import { rest } from 'msw'\n\nexport const handlers = [\n  // 로그인 POST 요청에 대한 핸들러\n  // rest.post('/api/login', (req, res, ctx) => {\n  //   const { username, password } = req.body\n  //   // 간단한 로그인 로직 (모킹)\n  //   if (username === 'admin' && password === 'admin123') {\n  //     return res(\n  //       ctx.status(200),\n  //       ctx.json({\n  //         message: '로그인 성공',\n  //         token: 'mocked-jwt-token',\n  //       }),\n  //     )\n  //   }\n  //   return res(\n  //     ctx.status(403),\n  //     ctx.json({\n  //       message: '로그인 실패: 잘못된 자격 증명',\n  //     }),\n  //   )\n  // }),\n  // // 다른 API 요청에 대한 예시 핸들러\n  // rest.get('/user', (req, res, ctx) => {\n  //   return res(\n  //     ctx.status(200),\n  //     ctx.json({\n  //       username: 'admin',\n  //       email: 'admin@example.com',\n  //     }),\n  //   )\n  // }),\n]\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAE1B,OAAO,MAAMC,QAAQ,GAAG;EACtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}