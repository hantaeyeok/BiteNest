{"ast":null,"code":"import cookieUtils from \"@bundled-es-modules/cookie\";\nimport { store } from \"@mswjs/cookies\";\nfunction getAllDocumentCookies() {\n  return cookieUtils.parse(document.cookie);\n}\nfunction getRequestCookies(request) {\n  if (typeof document === \"undefined\" || typeof location === \"undefined\") {\n    return {};\n  }\n  switch (request.credentials) {\n    case \"same-origin\":\n      {\n        const url = new URL(request.url);\n        return location.origin === url.origin ? getAllDocumentCookies() : {};\n      }\n    case \"include\":\n      {\n        return getAllDocumentCookies();\n      }\n    default:\n      {\n        return {};\n      }\n  }\n}\nfunction getAllRequestCookies(request) {\n  const requestCookiesString = request.headers.get(\"cookie\");\n  const cookiesFromHeaders = requestCookiesString ? cookieUtils.parse(requestCookiesString) : {};\n  store.hydrate();\n  const cookiesFromStore = Array.from(store.get(request)?.entries()).reduce((cookies, [name, {\n    value\n  }]) => {\n    return Object.assign(cookies, {\n      [name.trim()]: value\n    });\n  }, {});\n  const cookiesFromDocument = getRequestCookies(request);\n  const forwardedCookies = {\n    ...cookiesFromDocument,\n    ...cookiesFromStore\n  };\n  for (const [name, value] of Object.entries(forwardedCookies)) {\n    request.headers.append(\"cookie\", cookieUtils.serialize(name, value));\n  }\n  return {\n    ...forwardedCookies,\n    ...cookiesFromHeaders\n  };\n}\nexport { getAllRequestCookies, getRequestCookies };","map":{"version":3,"names":["cookieUtils","store","getAllDocumentCookies","parse","document","cookie","getRequestCookies","request","location","credentials","url","URL","origin","getAllRequestCookies","requestCookiesString","headers","get","cookiesFromHeaders","hydrate","cookiesFromStore","Array","from","entries","reduce","cookies","name","value","Object","assign","trim","cookiesFromDocument","forwardedCookies","append","serialize"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/utils/request/getRequestCookies.ts"],"sourcesContent":["import cookieUtils from '@bundled-es-modules/cookie'\nimport { store } from '@mswjs/cookies'\n\nfunction getAllDocumentCookies() {\n  return cookieUtils.parse(document.cookie)\n}\n\n/** @todo Rename this to \"getDocumentCookies\" */\n/**\n * Returns relevant document cookies based on the request `credentials` option.\n */\nexport function getRequestCookies(request: Request): Record<string, string> {\n  /**\n   * @note No cookies persist on the document in Node.js: no document.\n   */\n  if (typeof document === 'undefined' || typeof location === 'undefined') {\n    return {}\n  }\n\n  switch (request.credentials) {\n    case 'same-origin': {\n      const url = new URL(request.url)\n\n      // Return document cookies only when requested a resource\n      // from the same origin as the current document.\n      return location.origin === url.origin ? getAllDocumentCookies() : {}\n    }\n\n    case 'include': {\n      // Return all document cookies.\n      return getAllDocumentCookies()\n    }\n\n    default: {\n      return {}\n    }\n  }\n}\n\nexport function getAllRequestCookies(request: Request): Record<string, string> {\n  const requestCookiesString = request.headers.get('cookie')\n  const cookiesFromHeaders = requestCookiesString\n    ? cookieUtils.parse(requestCookiesString)\n    : {}\n\n  store.hydrate()\n\n  const cookiesFromStore = Array.from(store.get(request)?.entries()).reduce<\n    Record<string, string>\n  >((cookies, [name, { value }]) => {\n    return Object.assign(cookies, { [name.trim()]: value })\n  }, {})\n\n  const cookiesFromDocument = getRequestCookies(request)\n\n  const forwardedCookies = {\n    ...cookiesFromDocument,\n    ...cookiesFromStore,\n  }\n\n  // Set the inferred cookies from the cookie store and the document\n  // on the request's headers.\n  /**\n   * @todo Consider making this a separate step so this function\n   * is pure-er.\n   */\n  for (const [name, value] of Object.entries(forwardedCookies)) {\n    request.headers.append('cookie', cookieUtils.serialize(name, value))\n  }\n\n  return {\n    ...forwardedCookies,\n    ...cookiesFromHeaders,\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAA,MAAiB;AACxB,SAASC,KAAA,QAAa;AAEtB,SAASC,sBAAA,EAAwB;EAC/B,OAAOF,WAAA,CAAYG,KAAA,CAAMC,QAAA,CAASC,MAAM;AAC1C;AAMO,SAASC,kBAAkBC,OAAA,EAA0C;EAI1E,IAAI,OAAOH,QAAA,KAAa,eAAe,OAAOI,QAAA,KAAa,aAAa;IACtE,OAAO,CAAC;EACV;EAEA,QAAQD,OAAA,CAAQE,WAAA;IACd,KAAK;MAAe;QAClB,MAAMC,GAAA,GAAM,IAAIC,GAAA,CAAIJ,OAAA,CAAQG,GAAG;QAI/B,OAAOF,QAAA,CAASI,MAAA,KAAWF,GAAA,CAAIE,MAAA,GAASV,qBAAA,CAAsB,IAAI,CAAC;MACrE;IAEA,KAAK;MAAW;QAEd,OAAOA,qBAAA,CAAsB;MAC/B;IAEA;MAAS;QACP,OAAO,CAAC;MACV;EACF;AACF;AAEO,SAASW,qBAAqBN,OAAA,EAA0C;EAC7E,MAAMO,oBAAA,GAAuBP,OAAA,CAAQQ,OAAA,CAAQC,GAAA,CAAI,QAAQ;EACzD,MAAMC,kBAAA,GAAqBH,oBAAA,GACvBd,WAAA,CAAYG,KAAA,CAAMW,oBAAoB,IACtC,CAAC;EAELb,KAAA,CAAMiB,OAAA,CAAQ;EAEd,MAAMC,gBAAA,GAAmBC,KAAA,CAAMC,IAAA,CAAKpB,KAAA,CAAMe,GAAA,CAAIT,OAAO,GAAGe,OAAA,CAAQ,CAAC,EAAEC,MAAA,CAEjE,CAACC,OAAA,EAAS,CAACC,IAAA,EAAM;IAAEC;EAAM,CAAC,MAAM;IAChC,OAAOC,MAAA,CAAOC,MAAA,CAAOJ,OAAA,EAAS;MAAE,CAACC,IAAA,CAAKI,IAAA,CAAK,CAAC,GAAGH;IAAM,CAAC;EACxD,GAAG,CAAC,CAAC;EAEL,MAAMI,mBAAA,GAAsBxB,iBAAA,CAAkBC,OAAO;EAErD,MAAMwB,gBAAA,GAAmB;IACvB,GAAGD,mBAAA;IACH,GAAGX;EACL;EAQA,WAAW,CAACM,IAAA,EAAMC,KAAK,KAAKC,MAAA,CAAOL,OAAA,CAAQS,gBAAgB,GAAG;IAC5DxB,OAAA,CAAQQ,OAAA,CAAQiB,MAAA,CAAO,UAAUhC,WAAA,CAAYiC,SAAA,CAAUR,IAAA,EAAMC,KAAK,CAAC;EACrE;EAEA,OAAO;IACL,GAAGK,gBAAA;IACH,GAAGd;EACL;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}