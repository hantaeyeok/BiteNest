{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\n\n// this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nfunction isISIN(str) {\n  (0, _assertString.default)(str);\n  if (!isin.test(str)) {\n    return false;\n  }\n  var double = true;\n  var sum = 0;\n  // convert values\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10);\n      // letters have two digits, so handle the low order\n      // and high order digits separately.\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n        if (double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n        double = !double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n      if (double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n      double = !double;\n    }\n  }\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","isISIN","_assertString","_interopRequireDefault","require","obj","__esModule","isin","str","test","double","sum","i","length","charCodeAt","lo","hi","Math","trunc","_i","_arr","digit","_digit","check","module"],"sources":["/Users/leeyangie/.yarn/berry/cache/validator-npm-13.12.0-6c8a423cbf-10c0.zip/node_modules/validator/lib/isISIN.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\n\n// this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nfunction isISIN(str) {\n  (0, _assertString.default)(str);\n  if (!isin.test(str)) {\n    return false;\n  }\n  var double = true;\n  var sum = 0;\n  // convert values\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10);\n      // letters have two digits, so handle the low order\n      // and high order digits separately.\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n        if (double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n        double = !double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n      if (double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n      double = !double;\n    }\n  }\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}