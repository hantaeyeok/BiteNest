{"ast":null,"code":"import { match } from \"path-to-regexp\";\nimport { getCleanUrl } from \"@mswjs/interceptors\";\nimport { normalizePath } from './normalizePath.mjs';\nfunction coercePath(path) {\n  return path.replace(/([:a-zA-Z_-]*)(\\*{1,2})+/g, (_, parameterName, wildcard) => {\n    const expression = \"(.*)\";\n    if (!parameterName) {\n      return expression;\n    }\n    return parameterName.startsWith(\":\") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;\n  }).replace(/([^\\/])(:)(?=\\d+)/, \"$1\\\\$2\").replace(/^([^\\/]+)(:)(?=\\/\\/)/, \"$1\\\\$2\");\n}\nfunction matchRequestUrl(url, path, baseUrl) {\n  const normalizedPath = normalizePath(path, baseUrl);\n  const cleanPath = typeof normalizedPath === \"string\" ? coercePath(normalizedPath) : normalizedPath;\n  const cleanUrl = getCleanUrl(url);\n  const result = match(cleanPath, {\n    decode: decodeURIComponent\n  })(cleanUrl);\n  const params = result && result.params || {};\n  return {\n    matches: result !== false,\n    params\n  };\n}\nexport { coercePath, matchRequestUrl };","map":{"version":3,"names":["match","getCleanUrl","normalizePath","coercePath","path","replace","_","parameterName","wildcard","expression","startsWith","matchRequestUrl","url","baseUrl","normalizedPath","cleanPath","cleanUrl","result","decode","decodeURIComponent","params","matches"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-7370ac2e06/node_modules/msw/lib/core/utils/matching/matchRequestUrl.mjs"],"sourcesContent":["import { match } from \"path-to-regexp\";\nimport { getCleanUrl } from \"@mswjs/interceptors\";\nimport { normalizePath } from './normalizePath.mjs';\nfunction coercePath(path) {\n  return path.replace(\n    /([:a-zA-Z_-]*)(\\*{1,2})+/g,\n    (_, parameterName, wildcard) => {\n      const expression = \"(.*)\";\n      if (!parameterName) {\n        return expression;\n      }\n      return parameterName.startsWith(\":\") ? `${parameterName}${wildcard}` : `${parameterName}${expression}`;\n    }\n  ).replace(/([^\\/])(:)(?=\\d+)/, \"$1\\\\$2\").replace(/^([^\\/]+)(:)(?=\\/\\/)/, \"$1\\\\$2\");\n}\nfunction matchRequestUrl(url, path, baseUrl) {\n  const normalizedPath = normalizePath(path, baseUrl);\n  const cleanPath = typeof normalizedPath === \"string\" ? coercePath(normalizedPath) : normalizedPath;\n  const cleanUrl = getCleanUrl(url);\n  const result = match(cleanPath, { decode: decodeURIComponent })(cleanUrl);\n  const params = result && result.params || {};\n  return {\n    matches: result !== false,\n    params\n  };\n}\nexport {\n  coercePath,\n  matchRequestUrl\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,UAAUA,CAACC,IAAI,EAAE;EACxB,OAAOA,IAAI,CAACC,OAAO,CACjB,2BAA2B,EAC3B,CAACC,CAAC,EAAEC,aAAa,EAAEC,QAAQ,KAAK;IAC9B,MAAMC,UAAU,GAAG,MAAM;IACzB,IAAI,CAACF,aAAa,EAAE;MAClB,OAAOE,UAAU;IACnB;IACA,OAAOF,aAAa,CAACG,UAAU,CAAC,GAAG,CAAC,GAAG,GAAGH,aAAa,GAAGC,QAAQ,EAAE,GAAG,GAAGD,aAAa,GAAGE,UAAU,EAAE;EACxG,CACF,CAAC,CAACJ,OAAO,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAACA,OAAO,CAAC,sBAAsB,EAAE,QAAQ,CAAC;AACpF;AACA,SAASM,eAAeA,CAACC,GAAG,EAAER,IAAI,EAAES,OAAO,EAAE;EAC3C,MAAMC,cAAc,GAAGZ,aAAa,CAACE,IAAI,EAAES,OAAO,CAAC;EACnD,MAAME,SAAS,GAAG,OAAOD,cAAc,KAAK,QAAQ,GAAGX,UAAU,CAACW,cAAc,CAAC,GAAGA,cAAc;EAClG,MAAME,QAAQ,GAAGf,WAAW,CAACW,GAAG,CAAC;EACjC,MAAMK,MAAM,GAAGjB,KAAK,CAACe,SAAS,EAAE;IAAEG,MAAM,EAAEC;EAAmB,CAAC,CAAC,CAACH,QAAQ,CAAC;EACzE,MAAMI,MAAM,GAAGH,MAAM,IAAIA,MAAM,CAACG,MAAM,IAAI,CAAC,CAAC;EAC5C,OAAO;IACLC,OAAO,EAAEJ,MAAM,KAAK,KAAK;IACzBG;EACF,CAAC;AACH;AACA,SACEjB,UAAU,EACVQ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}