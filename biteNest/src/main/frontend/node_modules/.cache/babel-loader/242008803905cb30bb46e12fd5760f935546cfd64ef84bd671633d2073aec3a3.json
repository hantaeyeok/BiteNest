{"ast":null,"code":"import { cleanUrl } from '../url/cleanUrl.mjs';\nimport { getAbsoluteUrl } from '../url/getAbsoluteUrl.mjs';\nfunction normalizePath(path, baseUrl) {\n  if (path instanceof RegExp) {\n    return path;\n  }\n  const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl);\n  return cleanUrl(maybeAbsoluteUrl);\n}\nexport { normalizePath };","map":{"version":3,"names":["cleanUrl","getAbsoluteUrl","normalizePath","path","baseUrl","RegExp","maybeAbsoluteUrl"],"sources":["/Users/leeyangie/Documents/GitHub/BiteNest/biteNest/src/main/frontend/.yarn/unplugged/msw-virtual-c17a34f746/node_modules/msw/src/core/utils/matching/normalizePath.ts"],"sourcesContent":["import type { Path } from './matchRequestUrl'\nimport { cleanUrl } from '../url/cleanUrl'\nimport { getAbsoluteUrl } from '../url/getAbsoluteUrl'\n\n/**\n * Normalizes a given request handler path:\n * - Preserves RegExp.\n * - Removes query parameters and hashes.\n * - Rebases relative URLs against the \"baseUrl\" or the current location.\n * - Preserves relative URLs in Node.js, unless specified otherwise.\n */\nexport function normalizePath(path: Path, baseUrl?: string): Path {\n  // RegExp paths do not need normalization.\n  if (path instanceof RegExp) {\n    return path\n  }\n\n  const maybeAbsoluteUrl = getAbsoluteUrl(path, baseUrl)\n\n  return cleanUrl(maybeAbsoluteUrl)\n}\n"],"mappings":"AACA,SAASA,QAAA,QAAgB;AACzB,SAASC,cAAA,QAAsB;AASxB,SAASC,cAAcC,IAAA,EAAYC,OAAA,EAAwB;EAEhE,IAAID,IAAA,YAAgBE,MAAA,EAAQ;IAC1B,OAAOF,IAAA;EACT;EAEA,MAAMG,gBAAA,GAAmBL,cAAA,CAAeE,IAAA,EAAMC,OAAO;EAErD,OAAOJ,QAAA,CAASM,gBAAgB;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}