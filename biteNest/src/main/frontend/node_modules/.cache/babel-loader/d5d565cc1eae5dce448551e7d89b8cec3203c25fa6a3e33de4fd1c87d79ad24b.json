{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTaxID;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\nvar _isDate = _interopRequireDefault(require(\"./isDate\"));\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n/**\n * TIN Validation\n * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.\n *\n * EU-UK:\n * National TIN validity is calculated using public algorithms as made available by DG TAXUD.\n *\n * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.\n *\n * US:\n * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,\n *  is used to identify a business entity.\n *\n * NOTES:\n *  - Prefix 47 is being reserved for future use\n *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.\n *\n * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`\n * for more information.\n */\n\n// Locale functions\n\n/*\n * bg-BG validation function\n * (Edinen graždanski nomer (EGN/ЕГН), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last) digit\n */\nfunction bgBgCheck(tin) {\n  // Extract full year, normalize month and check birth date validity\n  var century_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 40) {\n    month -= 40;\n    century_year = \"20\".concat(century_year);\n  } else if (month > 20) {\n    month -= 20;\n    century_year = \"18\".concat(century_year);\n  } else {\n    century_year = \"19\".concat(century_year);\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n  var date = \"\".concat(century_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n\n  // Calculate checksum by multiplying digits with fixed values\n  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n  var checksum = 0;\n  for (var i = 0; i < multip_lookup.length; i++) {\n    checksum += digits[i] * multip_lookup[i];\n  }\n  checksum = checksum % 11 === 10 ? 0 : checksum % 11;\n  return checksum === digits[9];\n}\n\n/**\n * Check if an input is a valid Canadian SIN (Social Insurance Number)\n *\n * The Social Insurance Number (SIN) is a 9 digit number that\n * you need to work in Canada or to have access to government programs and benefits.\n *\n * https://en.wikipedia.org/wiki/Social_Insurance_Number\n * https://www.canada.ca/en/employment-social-development/services/sin.html\n * https://www.codercrunch.com/challenge/819302488/sin-validator\n *\n * @param {string} input\n * @return {boolean}\n */\nfunction isCanadianSIN(input) {\n  var digitsArray = input.split('');\n  var even = digitsArray.filter(function (_, idx) {\n    return idx % 2;\n  }).map(function (i) {\n    return Number(i) * 2;\n  }).join('').split('');\n  var total = digitsArray.filter(function (_, idx) {\n    return !(idx % 2);\n  }).concat(even).map(function (i) {\n    return Number(i);\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  });\n  return total % 10 === 0;\n}\n\n/*\n * cs-CZ validation function\n * (Rodné číslo (RČ), persons only)\n * Checks if birth date (first six digits) is valid and divisibility by 11\n * Material not in DG TAXUD document sourced from:\n * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`\n * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`\n */\nfunction csCzCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n\n  // Extract full year from TIN length\n  var full_year = parseInt(tin.slice(0, 2), 10);\n  if (tin.length === 10) {\n    if (full_year < 54) {\n      full_year = \"20\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n  } else {\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n    if (full_year < 54) {\n      full_year = \"19\".concat(full_year);\n    } else {\n      return false; // No 18XX years seen in any of the resources\n    }\n  }\n  // Add missing zero if needed\n  if (full_year.length === 3) {\n    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');\n  }\n\n  // Extract month from TIN and normalize\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 50) {\n    month -= 50;\n  }\n  if (month > 20) {\n    // Month-plus-twenty was only introduced in 2004\n    if (parseInt(full_year, 10) < 2004) {\n      return false;\n    }\n    month -= 20;\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Verify divisibility by 11\n  if (tin.length === 10) {\n    if (parseInt(tin, 10) % 11 !== 0) {\n      // Some numbers up to and including 1985 are still valid if\n      // check (last) digit equals 0 and modulo of first 9 digits equals 10\n      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;\n      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {\n        if (parseInt(tin.slice(9), 10) !== 0) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n * de-AT validation function\n * (Abgabenkontonummer, persons/entities)\n * Verify TIN validity by calling luhnCheck()\n */\nfunction deAtCheck(tin) {\n  return algorithms.luhnCheck(tin);\n}\n\n/*\n * de-DE validation function\n * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)\n * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit\n * Partial implementation of spec (same result with both algorithms always)\n */\nfunction deDeCheck(tin) {\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n\n  // Fill array with strings of number positions\n  var occurences = [];\n  for (var i = 0; i < digits.length - 1; i++) {\n    occurences.push('');\n    for (var j = 0; j < digits.length - 1; j++) {\n      if (digits[i] === digits[j]) {\n        occurences[i] += j;\n      }\n    }\n  }\n\n  // Remove digits with one occurence and test for only one duplicate/triplicate\n  occurences = occurences.filter(function (a) {\n    return a.length > 1;\n  });\n  if (occurences.length !== 2 && occurences.length !== 3) {\n    return false;\n  }\n\n  // In case of triplicate value only two digits are allowed next to each other\n  if (occurences[0].length === 3) {\n    var trip_locations = occurences[0].split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var recurrent = 0; // Amount of neighbour occurences\n    for (var _i = 0; _i < trip_locations.length - 1; _i++) {\n      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {\n        recurrent += 1;\n      }\n    }\n    if (recurrent === 2) {\n      return false;\n    }\n  }\n  return algorithms.iso7064Check(tin);\n}\n\n/*\n * dk-DK validation function\n * (CPR-nummer (personnummer), persons only)\n * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,\n * and calculates check (last) digit\n */\nfunction dkDkCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n\n  // Extract year, check if valid for given century digit and add century\n  var year = parseInt(tin.slice(4, 6), 10);\n  var century_digit = tin.slice(6, 7);\n  switch (century_digit) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n      year = \"19\".concat(year);\n      break;\n    case '4':\n    case '9':\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else {\n        year = \"19\".concat(year);\n      }\n      break;\n    default:\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else if (year > 58) {\n        year = \"18\".concat(year);\n      } else {\n        return false;\n      }\n      break;\n  }\n  // Add missing zero if needed\n  if (year.length === 3) {\n    year = [year.slice(0, 2), '0', year.slice(2)].join('');\n  }\n  // Check date validity\n  var date = \"\".concat(year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 4;\n  // Multiply by weight and add to checksum\n  for (var i = 0; i < 9; i++) {\n    checksum += digits[i] * weight;\n    weight -= 1;\n    if (weight === 1) {\n      weight = 7;\n    }\n  }\n  checksum %= 11;\n  if (checksum === 1) {\n    return false;\n  }\n  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;\n}\n\n/*\n * el-CY validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)\n * Verify TIN validity by calculating ASCII value of check (last) character\n */\nfunction elCyCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.slice(0, 8).split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  // add digits in even places\n  for (var i = 1; i < digits.length; i += 2) {\n    checksum += digits[i];\n  }\n\n  // add digits in odd places\n  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {\n    if (digits[_i2] < 2) {\n      checksum += 1 - digits[_i2];\n    } else {\n      checksum += 2 * (digits[_i2] - 2) + 5;\n      if (digits[_i2] > 4) {\n        checksum += 2;\n      }\n    }\n  }\n  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);\n}\n\n/*\n * el-GR validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)\n * Verify TIN validity by calculating check (last) digit\n * Algorithm not in DG TAXUD document- sourced from:\n * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`\n */\nfunction elGrCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  for (var i = 0; i < 8; i++) {\n    checksum += digits[i] * Math.pow(2, 8 - i);\n  }\n  return checksum % 11 % 10 === digits[8];\n}\n\n/*\n * en-GB validation function (should go here if needed)\n * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),\n * persons/entities respectively)\n */\n\n/*\n * en-IE validation function\n * (Personal Public Service Number (PPS No), persons only)\n * Verify TIN validity by calculating check (second to last) character\n */\nfunction enIeCheck(tin) {\n  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8);\n  if (tin.length === 9 && tin[8] !== 'W') {\n    checksum += (tin[8].charCodeAt(0) - 64) * 9;\n  }\n  checksum %= 23;\n  if (checksum === 0) {\n    return tin[7].toUpperCase() === 'W';\n  }\n  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);\n}\n\n// Valid US IRS campus prefixes\nvar enUsCampusPrefix = {\n  andover: ['10', '12'],\n  atlanta: ['60', '67'],\n  austin: ['50', '53'],\n  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\n  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],\n  fresno: ['15', '24'],\n  internet: ['20', '26', '27', '45', '46', '47'],\n  kansas: ['40', '44'],\n  memphis: ['94', '95'],\n  ogden: ['80', '90'],\n  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\n  sba: ['31']\n};\n\n// Return an array of all US IRS campus prefixes\nfunction enUsGetPrefixes() {\n  var prefixes = [];\n  for (var location in enUsCampusPrefix) {\n    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n    // istanbul ignore else\n    if (enUsCampusPrefix.hasOwnProperty(location)) {\n      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));\n    }\n  }\n  return prefixes;\n}\n\n/*\n * en-US validation function\n * Verify that the TIN starts with a valid IRS campus prefix\n */\nfunction enUsCheck(tin) {\n  return enUsGetPrefixes().indexOf(tin.slice(0, 2)) !== -1;\n}\n\n/*\n * es-AR validation function\n * Clave Única de Identificación Tributaria (CUIT/CUIL)\n * Sourced from:\n * - https://servicioscf.afip.gob.ar/publico/abc/ABCpaso2.aspx?id_nivel1=3036&id_nivel2=3040&p=Conceptos%20b%C3%A1sicos\n * - https://es.wikipedia.org/wiki/Clave_%C3%9Anica_de_Identificaci%C3%B3n_Tributaria\n */\n\nfunction esArCheck(tin) {\n  var accum = 0;\n  var digits = tin.split('');\n  var digit = parseInt(digits.pop(), 10);\n  for (var i = 0; i < digits.length; i++) {\n    accum += digits[9 - i] * (2 + i % 6);\n  }\n  var verif = 11 - accum % 11;\n  if (verif === 11) {\n    verif = 0;\n  } else if (verif === 10) {\n    verif = 9;\n  }\n  return digit === verif;\n}\n\n/*\n * es-ES validation function\n * (Documento Nacional de Identidad (DNI)\n * or Número de Identificación de Extranjero (NIE), persons only)\n * Verify TIN validity by calculating check (last) character\n */\nfunction esEsCheck(tin) {\n  // Split characters into an array for further processing\n  var chars = tin.toUpperCase().split('');\n\n  // Replace initial letter if needed\n  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {\n    var lead_replace = 0;\n    switch (chars[0]) {\n      case 'Y':\n        lead_replace = 1;\n        break;\n      case 'Z':\n        lead_replace = 2;\n        break;\n      default:\n    }\n    chars.splice(0, 1, lead_replace);\n    // Fill with zeros if smaller than proper\n  } else {\n    while (chars.length < 9) {\n      chars.unshift(0);\n    }\n  }\n\n  // Calculate checksum and check according to lookup\n  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n  chars = chars.join('');\n  var checksum = parseInt(chars.slice(0, 8), 10) % 23;\n  return chars[8] === lookup[checksum];\n}\n\n/*\n * et-EE validation function\n * (Isikukood (IK), persons only)\n * Checks if birth date (century digit and six following) is valid and calculates check (last) digit\n * Material not in DG TAXUD document sourced from:\n * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`\n */\nfunction etEeCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(1, 3);\n  var century_digit = tin.slice(0, 1);\n  switch (century_digit) {\n    case '1':\n    case '2':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '3':\n    case '4':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 1;\n  // Multiply by weight and add to checksum\n  for (var i = 0; i < 10; i++) {\n    checksum += digits[i] * weight;\n    weight += 1;\n    if (weight === 10) {\n      weight = 1;\n    }\n  }\n  // Do again if modulo 11 of checksum is 10\n  if (checksum % 11 === 10) {\n    checksum = 0;\n    weight = 3;\n    for (var _i3 = 0; _i3 < 10; _i3++) {\n      checksum += digits[_i3] * weight;\n      weight += 1;\n      if (weight === 10) {\n        weight = 1;\n      }\n    }\n    if (checksum % 11 === 10) {\n      return digits[10] === 0;\n    }\n  }\n  return checksum % 11 === digits[10];\n}\n\n/*\n * fi-FI validation function\n * (Henkilötunnus (HETU), persons only)\n * Checks if birth date (first six digits plus century symbol) is valid\n * and calculates check (last) digit\n */\nfunction fiFiCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(4, 6);\n  var century_symbol = tin.slice(6, 7);\n  switch (century_symbol) {\n    case '+':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '-':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate check character\n  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;\n  if (checksum < 10) {\n    return checksum === parseInt(tin.slice(10), 10);\n  }\n  checksum -= 10;\n  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];\n  return letters_lookup[checksum] === tin.slice(10);\n}\n\n/*\n * fr/nl-BE validation function\n * (Numéro national (N.N.), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last two) digits\n */\nfunction frBeCheck(tin) {\n  // Zero month/day value is acceptable\n  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {\n    // Extract date from first six digits of TIN\n    var date = \"\".concat(tin.slice(0, 2), \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  }\n  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;\n  var checkdigits = parseInt(tin.slice(9, 11), 10);\n  if (checksum !== checkdigits) {\n    checksum = 97 - parseInt(\"2\".concat(tin.slice(0, 9)), 10) % 97;\n    if (checksum !== checkdigits) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n * fr-FR validation function\n * (Numéro fiscal de référence (numéro SPI), persons only)\n * Verify TIN validity by calculating check (last three) digits\n */\nfunction frFrCheck(tin) {\n  tin = tin.replace(/\\s/g, '');\n  var checksum = parseInt(tin.slice(0, 10), 10) % 511;\n  var checkdigits = parseInt(tin.slice(10, 13), 10);\n  return checksum === checkdigits;\n}\n\n/*\n * fr/lb-LU validation function\n * (numéro d’identification personnelle, persons only)\n * Verify birth date validity and run Luhn and Verhoeff checks\n */\nfunction frLuCheck(tin) {\n  // Extract date and check validity\n  var date = \"\".concat(tin.slice(0, 4), \"/\").concat(tin.slice(4, 6), \"/\").concat(tin.slice(6, 8));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Run Luhn check\n  if (!algorithms.luhnCheck(tin.slice(0, 12))) {\n    return false;\n  }\n  // Remove Luhn check digit and run Verhoeff check\n  return algorithms.verhoeffCheck(\"\".concat(tin.slice(0, 11)).concat(tin[12]));\n}\n\n/*\n * hr-HR validation function\n * (Osobni identifikacijski broj (OIB), persons/entities)\n * Verify TIN validity by calling iso7064Check(digits)\n */\nfunction hrHrCheck(tin) {\n  return algorithms.iso7064Check(tin);\n}\n\n/*\n * hu-HU validation function\n * (Adóazonosító jel, persons only)\n * Verify TIN validity by calculating check (last) digit\n */\nfunction huHuCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 8;\n  for (var i = 1; i < 9; i++) {\n    checksum += digits[i] * (i + 1);\n  }\n  return checksum % 11 === digits[9];\n}\n\n/*\n * lt-LT validation function (should go here if needed)\n * (Asmens kodas, persons/entities respectively)\n * Current validation check is alias of etEeCheck- same format applies\n */\n\n/*\n * it-IT first/last name validity check\n * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity\n * Due to lack of clarity between resources (\"Are only Italian consonants used?\n * What happens if a person has X in their name?\" etc.) only two test conditions\n * have been implemented:\n * Vowels may only be followed by other vowels or an X character\n * and X characters after vowels may only be followed by other X characters.\n */\nfunction itItNameCheck(name) {\n  // true at the first occurence of a vowel\n  var vowelflag = false;\n\n  // true at the first occurence of an X AFTER vowel\n  // (to properly handle last names with X as consonant)\n  var xflag = false;\n  for (var i = 0; i < 3; i++) {\n    if (!vowelflag && /[AEIOU]/.test(name[i])) {\n      vowelflag = true;\n    } else if (!xflag && vowelflag && name[i] === 'X') {\n      xflag = true;\n    } else if (i > 0) {\n      if (vowelflag && !xflag) {\n        if (!/[AEIOU]/.test(name[i])) {\n          return false;\n        }\n      }\n      if (xflag) {\n        if (!/X/.test(name[i])) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/*\n * it-IT validation function\n * (Codice fiscale (TIN-IT), persons only)\n * Verify name, birth date and codice catastale validity\n * and calculate check character.\n * Material not in DG-TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/Italian_fiscal_code`\n */\nfunction itItCheck(tin) {\n  // Capitalize and split characters into an array for further processing\n  var chars = tin.toUpperCase().split('');\n\n  // Check first and last name validity calling itItNameCheck()\n  if (!itItNameCheck(chars.slice(0, 3))) {\n    return false;\n  }\n  if (!itItNameCheck(chars.slice(3, 6))) {\n    return false;\n  }\n\n  // Convert letters in number spaces back to numbers if any\n  var number_locations = [6, 7, 9, 10, 12, 13, 14];\n  var number_replace = {\n    L: '0',\n    M: '1',\n    N: '2',\n    P: '3',\n    Q: '4',\n    R: '5',\n    S: '6',\n    T: '7',\n    U: '8',\n    V: '9'\n  };\n  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {\n    var i = _number_locations[_i4];\n    if (chars[i] in number_replace) {\n      chars.splice(i, 1, number_replace[chars[i]]);\n    }\n  }\n\n  // Extract month and day, and check date validity\n  var month_replace = {\n    A: '01',\n    B: '02',\n    C: '03',\n    D: '04',\n    E: '05',\n    H: '06',\n    L: '07',\n    M: '08',\n    P: '09',\n    R: '10',\n    S: '11',\n    T: '12'\n  };\n  var month = month_replace[chars[8]];\n  var day = parseInt(chars[9] + chars[10], 10);\n  if (day > 40) {\n    day -= 40;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(chars[6]).concat(chars[7], \"/\").concat(month, \"/\").concat(day);\n  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate check character by adding up even and odd characters as numbers\n  var checksum = 0;\n  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {\n    var char_to_int = parseInt(chars[_i5], 10);\n    if (isNaN(char_to_int)) {\n      char_to_int = chars[_i5].charCodeAt(0) - 65;\n    }\n    checksum += char_to_int;\n  }\n  var odd_convert = {\n    // Maps of characters at odd places\n    A: 1,\n    B: 0,\n    C: 5,\n    D: 7,\n    E: 9,\n    F: 13,\n    G: 15,\n    H: 17,\n    I: 19,\n    J: 21,\n    K: 2,\n    L: 4,\n    M: 18,\n    N: 20,\n    O: 11,\n    P: 3,\n    Q: 6,\n    R: 8,\n    S: 12,\n    T: 14,\n    U: 16,\n    V: 10,\n    W: 22,\n    X: 25,\n    Y: 24,\n    Z: 23,\n    0: 1,\n    1: 0\n  };\n  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {\n    var _char_to_int = 0;\n    if (chars[_i6] in odd_convert) {\n      _char_to_int = odd_convert[chars[_i6]];\n    } else {\n      var multiplier = parseInt(chars[_i6], 10);\n      _char_to_int = 2 * multiplier + 1;\n      if (multiplier > 4) {\n        _char_to_int += 2;\n      }\n    }\n    checksum += _char_to_int;\n  }\n  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {\n    return false;\n  }\n  return true;\n}\n\n/*\n * lv-LV validation function\n * (Personas kods (PK), persons only)\n * Check validity of birth date and calculate check (last) digit\n * Support only for old format numbers (not starting with '32', issued before 2017/07/01)\n * Material not in DG TAXUD document sourced from:\n * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`\n */\nfunction lvLvCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n  // Extract date from TIN\n  var day = tin.slice(0, 2);\n  if (day !== '32') {\n    // No date/checksum check if new format\n    var month = tin.slice(2, 4);\n    if (month !== '00') {\n      // No date check if unknown month\n      var full_year = tin.slice(4, 6);\n      switch (tin[6]) {\n        case '0':\n          full_year = \"18\".concat(full_year);\n          break;\n        case '1':\n          full_year = \"19\".concat(full_year);\n          break;\n        default:\n          full_year = \"20\".concat(full_year);\n          break;\n      }\n      // Check date validity\n      var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(day);\n      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n        return false;\n      }\n    }\n\n    // Calculate check digit\n    var checksum = 1101;\n    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n    for (var i = 0; i < tin.length - 1; i++) {\n      checksum -= parseInt(tin[i], 10) * multip_lookup[i];\n    }\n    return parseInt(tin[10], 10) === checksum % 11;\n  }\n  return true;\n}\n\n/*\n * mt-MT validation function\n * (Identity Card Number or Unique Taxpayer Reference, persons/entities)\n * Verify Identity Card Number structure (no other tests found)\n */\nfunction mtMtCheck(tin) {\n  if (tin.length !== 9) {\n    // No tests for UTR\n    var chars = tin.toUpperCase().split('');\n    // Fill with zeros if smaller than proper\n    while (chars.length < 8) {\n      chars.unshift(0);\n    }\n    // Validate format according to last character\n    switch (tin[7]) {\n      case 'A':\n      case 'P':\n        if (parseInt(chars[6], 10) === 0) {\n          return false;\n        }\n        break;\n      default:\n        {\n          var first_part = parseInt(chars.join('').slice(0, 5), 10);\n          if (first_part > 32000) {\n            return false;\n          }\n          var second_part = parseInt(chars.join('').slice(5, 7), 10);\n          if (first_part === second_part) {\n            return false;\n          }\n        }\n    }\n  }\n  return true;\n}\n\n/*\n * nl-NL validation function\n * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),\n * persons/entities respectively)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction nlNlCheck(tin) {\n  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11 === parseInt(tin[8], 10);\n}\n\n/*\n * pl-PL validation function\n * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n * or Numer identyfikacji podatkowej (NIP), persons/entities)\n * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit\n */\nfunction plPlCheck(tin) {\n  // NIP\n  if (tin.length === 10) {\n    // Calculate last digit by multiplying with lookup\n    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var _checksum = 0;\n    for (var i = 0; i < lookup.length; i++) {\n      _checksum += parseInt(tin[i], 10) * lookup[i];\n    }\n    _checksum %= 11;\n    if (_checksum === 10) {\n      return false;\n    }\n    return _checksum === parseInt(tin[9], 10);\n  }\n\n  // PESEL\n  // Extract full year using month\n  var full_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 80) {\n    full_year = \"18\".concat(full_year);\n    month -= 80;\n  } else if (month > 60) {\n    full_year = \"22\".concat(full_year);\n    month -= 60;\n  } else if (month > 40) {\n    full_year = \"21\".concat(full_year);\n    month -= 40;\n  } else if (month > 20) {\n    full_year = \"20\".concat(full_year);\n    month -= 20;\n  } else {\n    full_year = \"19\".concat(full_year);\n  }\n  // Add leading zero to month if needed\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate last digit by mulitplying with odd one-digit numbers except 5\n  var checksum = 0;\n  var multiplier = 1;\n  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {\n    checksum += parseInt(tin[_i7], 10) * multiplier % 10;\n    multiplier += 2;\n    if (multiplier > 10) {\n      multiplier = 1;\n    } else if (multiplier === 5) {\n      multiplier += 2;\n    }\n  }\n  checksum = 10 - checksum % 10;\n  return checksum === parseInt(tin[10], 10);\n}\n\n/*\n* pt-BR validation function\n* (Cadastro de Pessoas Físicas (CPF, persons)\n* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)\n* Both inputs will be validated\n*/\n\nfunction ptBrCheck(tin) {\n  if (tin.length === 11) {\n    var _sum;\n    var remainder;\n    _sum = 0;\n    if (\n    // Reject known invalid CPFs\n    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;\n    for (var i = 1; i <= 9; i++) _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;\n    _sum = 0;\n    for (var _i8 = 1; _i8 <= 10; _i8++) _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;\n    return true;\n  }\n  if (\n  // Reject know invalid CNPJs\n  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {\n    return false;\n  }\n  var length = tin.length - 2;\n  var identifiers = tin.substring(0, length);\n  var verificators = tin.substring(length);\n  var sum = 0;\n  var pos = length - 7;\n  for (var _i9 = length; _i9 >= 1; _i9--) {\n    sum += identifiers.charAt(length - _i9) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(0), 10)) {\n    return false;\n  }\n  length += 1;\n  identifiers = tin.substring(0, length);\n  sum = 0;\n  pos = length - 7;\n  for (var _i10 = length; _i10 >= 1; _i10--) {\n    sum += identifiers.charAt(length - _i10) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(1), 10)) {\n    return false;\n  }\n  return true;\n}\n\n/*\n * pt-PT validation function\n * (Número de identificação fiscal (NIF), persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction ptPtCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n  return checksum === parseInt(tin[8], 10);\n}\n\n/*\n * ro-RO validation function\n * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),\n * persons only)\n * Verify CNP validity by calculating check (last) digit (test not found for CIF)\n * Material not in DG TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/National_identification_number#Romania`\n */\nfunction roRoCheck(tin) {\n  if (tin.slice(0, 4) !== '9000') {\n    // No test found for this format\n    // Extract full year using century digit if possible\n    var full_year = tin.slice(1, 3);\n    switch (tin[0]) {\n      case '1':\n      case '2':\n        full_year = \"19\".concat(full_year);\n        break;\n      case '3':\n      case '4':\n        full_year = \"18\".concat(full_year);\n        break;\n      case '5':\n      case '6':\n        full_year = \"20\".concat(full_year);\n        break;\n      default:\n    }\n\n    // Check date validity\n    var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n    if (date.length === 8) {\n      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n        return false;\n      }\n    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n\n    // Calculate check digit\n    var digits = tin.split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var checksum = 0;\n    for (var i = 0; i < multipliers.length; i++) {\n      checksum += digits[i] * multipliers[i];\n    }\n    if (checksum % 11 === 10) {\n      return digits[12] === 1;\n    }\n    return digits[12] === checksum % 11;\n  }\n  return true;\n}\n\n/*\n * sk-SK validation function\n * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)\n * Checks validity of pre-1954 birth numbers (rodné číslo) only\n * Due to the introduction of the pseudo-random BIČ it is not possible to test\n * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand\n */\nfunction skSkCheck(tin) {\n  if (tin.length === 9) {\n    tin = tin.replace(/\\W/, '');\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n\n    // Extract full year from TIN length\n    var full_year = parseInt(tin.slice(0, 2), 10);\n    if (full_year > 53) {\n      return false;\n    }\n    if (full_year < 10) {\n      full_year = \"190\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n\n    // Extract month from TIN and normalize\n    var month = parseInt(tin.slice(2, 4), 10);\n    if (month > 50) {\n      month -= 50;\n    }\n    if (month < 10) {\n      month = \"0\".concat(month);\n    }\n\n    // Check date validity\n    var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n * sl-SI validation function\n * (Davčna številka, persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction slSiCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8) % 11;\n  if (checksum === 10) {\n    return parseInt(tin[7], 10) === 0;\n  }\n  return checksum === parseInt(tin[7], 10);\n}\n\n/*\n * sv-SE validation function\n * (Personnummer or samordningsnummer, persons only)\n * Checks validity of birth date and calls luhnCheck() to validate check (last) digit\n */\nfunction svSeCheck(tin) {\n  // Make copy of TIN and normalize to two-digit year form\n  var tin_copy = tin.slice(0);\n  if (tin.length > 11) {\n    tin_copy = tin_copy.slice(2);\n  }\n\n  // Extract date of birth\n  var full_year = '';\n  var month = tin_copy.slice(2, 4);\n  var day = parseInt(tin_copy.slice(4, 6), 10);\n  if (tin.length > 11) {\n    full_year = tin.slice(0, 4);\n  } else {\n    full_year = tin.slice(0, 2);\n    if (tin.length === 11 && day < 60) {\n      // Extract full year from centenarian symbol\n      // Should work just fine until year 10000 or so\n      var current_year = new Date().getFullYear().toString();\n      var current_century = parseInt(current_year.slice(0, 2), 10);\n      current_year = parseInt(current_year, 10);\n      if (tin[6] === '-') {\n        if (parseInt(\"\".concat(current_century).concat(full_year), 10) > current_year) {\n          full_year = \"\".concat(current_century - 1).concat(full_year);\n        } else {\n          full_year = \"\".concat(current_century).concat(full_year);\n        }\n      } else {\n        full_year = \"\".concat(current_century - 1).concat(full_year);\n        if (current_year - parseInt(full_year, 10) < 100) {\n          return false;\n        }\n      }\n    }\n  }\n\n  // Normalize day and check date validity\n  if (day > 60) {\n    day -= 60;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(day);\n  if (date.length === 8) {\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n  return algorithms.luhnCheck(tin.replace(/\\W/, ''));\n}\n\n/**\n * uk-UA validation function\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction ukUaCheck(tin) {\n  // Calculate check digit\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var multipliers = [-1, 5, 7, 9, 4, 6, 10, 5, 7];\n  var checksum = 0;\n  for (var i = 0; i < multipliers.length; i++) {\n    checksum += digits[i] * multipliers[i];\n  }\n  return checksum % 11 === 10 ? digits[9] === 0 : digits[9] === checksum % 11;\n}\n\n// Locale lookup objects\n\n/*\n * Tax id regex formats for various locales\n *\n * Where not explicitly specified in DG-TAXUD document both\n * uppercase and lowercase letters are acceptable.\n */\nvar taxIdFormat = {\n  'bg-BG': /^\\d{10}$/,\n  'cs-CZ': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'de-AT': /^\\d{9}$/,\n  'de-DE': /^[1-9]\\d{10}$/,\n  'dk-DK': /^\\d{6}-{0,1}\\d{4}$/,\n  'el-CY': /^[09]\\d{7}[A-Z]$/,\n  'el-GR': /^([0-4]|[7-9])\\d{8}$/,\n  'en-CA': /^\\d{9}$/,\n  'en-GB': /^\\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\\d{6}[ABCD ]$/i,\n  'en-IE': /^\\d{7}[A-W][A-IW]{0,1}$/i,\n  'en-US': /^\\d{2}[- ]{0,1}\\d{7}$/,\n  'es-AR': /(20|23|24|27|30|33|34)[0-9]{8}[0-9]/,\n  'es-ES': /^(\\d{0,8}|[XYZKLM]\\d{7})[A-HJ-NP-TV-Z]$/i,\n  'et-EE': /^[1-6]\\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\\d$/,\n  'fi-FI': /^\\d{6}[-+A]\\d{3}[0-9A-FHJ-NPR-Y]$/i,\n  'fr-BE': /^\\d{11}$/,\n  'fr-FR': /^[0-3]\\d{12}$|^[0-3]\\d\\s\\d{2}(\\s\\d{3}){3}$/,\n  // Conforms both to official spec and provided example\n  'fr-LU': /^\\d{13}$/,\n  'hr-HR': /^\\d{11}$/,\n  'hu-HU': /^8\\d{9}$/,\n  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,\n  'lv-LV': /^\\d{6}-{0,1}\\d{5}$/,\n  // Conforms both to DG TAXUD spec and original research\n  'mt-MT': /^\\d{3,7}[APMGLHBZ]$|^([1-8])\\1\\d{7}$/i,\n  'nl-NL': /^\\d{9}$/,\n  'pl-PL': /^\\d{10,11}$/,\n  'pt-BR': /(?:^\\d{11}$)|(?:^\\d{14}$)/,\n  'pt-PT': /^\\d{9}$/,\n  'ro-RO': /^\\d{13}$/,\n  'sk-SK': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'sl-SI': /^[1-9]\\d{7}$/,\n  'sv-SE': /^(\\d{6}[-+]{0,1}\\d{4}|(18|19|20)\\d{6}[-+]{0,1}\\d{4})$/,\n  'uk-UA': /^\\d{10}$/\n};\n// taxIdFormat locale aliases\ntaxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];\ntaxIdFormat['lt-LT'] = taxIdFormat['et-EE'];\ntaxIdFormat['nl-BE'] = taxIdFormat['fr-BE'];\ntaxIdFormat['fr-CA'] = taxIdFormat['en-CA'];\n\n// Algorithmic tax id check functions for various locales\nvar taxIdCheck = {\n  'bg-BG': bgBgCheck,\n  'cs-CZ': csCzCheck,\n  'de-AT': deAtCheck,\n  'de-DE': deDeCheck,\n  'dk-DK': dkDkCheck,\n  'el-CY': elCyCheck,\n  'el-GR': elGrCheck,\n  'en-CA': isCanadianSIN,\n  'en-IE': enIeCheck,\n  'en-US': enUsCheck,\n  'es-AR': esArCheck,\n  'es-ES': esEsCheck,\n  'et-EE': etEeCheck,\n  'fi-FI': fiFiCheck,\n  'fr-BE': frBeCheck,\n  'fr-FR': frFrCheck,\n  'fr-LU': frLuCheck,\n  'hr-HR': hrHrCheck,\n  'hu-HU': huHuCheck,\n  'it-IT': itItCheck,\n  'lv-LV': lvLvCheck,\n  'mt-MT': mtMtCheck,\n  'nl-NL': nlNlCheck,\n  'pl-PL': plPlCheck,\n  'pt-BR': ptBrCheck,\n  'pt-PT': ptPtCheck,\n  'ro-RO': roRoCheck,\n  'sk-SK': skSkCheck,\n  'sl-SI': slSiCheck,\n  'sv-SE': svSeCheck,\n  'uk-UA': ukUaCheck\n};\n// taxIdCheck locale aliases\ntaxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];\ntaxIdCheck['lt-LT'] = taxIdCheck['et-EE'];\ntaxIdCheck['nl-BE'] = taxIdCheck['fr-BE'];\ntaxIdCheck['fr-CA'] = taxIdCheck['en-CA'];\n\n// Regexes for locales where characters should be omitted before checking format\nvar allsymbols = /[-\\\\\\/!@#$%\\^&\\*\\(\\)\\+\\=\\[\\]]+/g;\nvar sanitizeRegexes = {\n  'de-AT': allsymbols,\n  'de-DE': /[\\/\\\\]/g,\n  'fr-BE': allsymbols\n};\n// sanitizeRegexes locale aliases\nsanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];\n\n/*\n * Validator function\n * Return true if the passed string is a valid tax identification number\n * for the specified locale.\n * Throw an error exception if the locale is not supported.\n */\nfunction isTaxID(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  (0, _assertString.default)(str);\n  // Copy TIN to avoid replacement if sanitized\n  var strcopy = str.slice(0);\n  if (locale in taxIdFormat) {\n    if (locale in sanitizeRegexes) {\n      strcopy = strcopy.replace(sanitizeRegexes[locale], '');\n    }\n    if (!taxIdFormat[locale].test(strcopy)) {\n      return false;\n    }\n    if (locale in taxIdCheck) {\n      return taxIdCheck[locale](strcopy);\n    }\n    // Fallthrough; not all locales have algorithmic checks\n    return true;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["_typeof","o","Symbol","iterator","constructor","prototype","Object","defineProperty","exports","value","default","isTaxID","_assertString","_interopRequireDefault","require","algorithms","_interopRequireWildcard","_isDate","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","obj","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","minLen","_arrayLikeToArray","toString","slice","name","Array","from","test","iter","isArray","len","length","arr2","bgBgCheck","tin","century_year","month","parseInt","concat","date","digits","split","map","multip_lookup","checksum","isCanadianSIN","input","digitsArray","even","filter","_","idx","Number","join","total","reduce","acc","cur","csCzCheck","replace","full_year","checkdigit","deAtCheck","luhnCheck","deDeCheck","occurences","push","j","trip_locations","recurrent","_i","iso7064Check","dkDkCheck","year","century_digit","weight","elCyCheck","_i2","String","fromCharCode","charAt","elGrCheck","Math","pow","enIeCheck","reverseMultiplyAndSum","charCodeAt","toUpperCase","enUsCampusPrefix","andover","atlanta","austin","brookhaven","cincinnati","fresno","internet","kansas","memphis","ogden","philadelphia","sba","enUsGetPrefixes","prefixes","location","apply","enUsCheck","indexOf","esArCheck","accum","digit","pop","verif","esEsCheck","chars","isNaN","lead_replace","splice","unshift","lookup","etEeCheck","_i3","fiFiCheck","century_symbol","letters_lookup","frBeCheck","checkdigits","frFrCheck","frLuCheck","verhoeffCheck","hrHrCheck","huHuCheck","itItNameCheck","vowelflag","xflag","itItCheck","number_locations","number_replace","L","M","N","P","Q","R","S","T","U","V","_i4","_number_locations","month_replace","A","B","C","D","E","H","day","_i5","char_to_int","odd_convert","F","G","I","J","K","O","W","X","Y","Z","_i6","_char_to_int","multiplier","lvLvCheck","mtMtCheck","first_part","second_part","nlNlCheck","plPlCheck","_checksum","_i7","ptBrCheck","_sum","remainder","substring","_i8","identifiers","verificators","sum","pos","_i9","result","_i10","ptPtCheck","roRoCheck","multipliers","skSkCheck","slSiCheck","svSeCheck","tin_copy","current_year","Date","getFullYear","current_century","ukUaCheck","taxIdFormat","taxIdCheck","allsymbols","sanitizeRegexes","str","locale","arguments","undefined","strcopy","Error","module"],"sources":["/Users/leeyangie/.yarn/berry/cache/validator-npm-13.12.0-6c8a423cbf-10c0.zip/node_modules/validator/lib/isTaxID.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTaxID;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\nvar _isDate = _interopRequireDefault(require(\"./isDate\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * TIN Validation\n * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.\n *\n * EU-UK:\n * National TIN validity is calculated using public algorithms as made available by DG TAXUD.\n *\n * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.\n *\n * US:\n * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,\n *  is used to identify a business entity.\n *\n * NOTES:\n *  - Prefix 47 is being reserved for future use\n *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.\n *\n * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`\n * for more information.\n */\n\n// Locale functions\n\n/*\n * bg-BG validation function\n * (Edinen graždanski nomer (EGN/ЕГН), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last) digit\n */\nfunction bgBgCheck(tin) {\n  // Extract full year, normalize month and check birth date validity\n  var century_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 40) {\n    month -= 40;\n    century_year = \"20\".concat(century_year);\n  } else if (month > 20) {\n    month -= 20;\n    century_year = \"18\".concat(century_year);\n  } else {\n    century_year = \"19\".concat(century_year);\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n  var date = \"\".concat(century_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n\n  // Calculate checksum by multiplying digits with fixed values\n  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n  var checksum = 0;\n  for (var i = 0; i < multip_lookup.length; i++) {\n    checksum += digits[i] * multip_lookup[i];\n  }\n  checksum = checksum % 11 === 10 ? 0 : checksum % 11;\n  return checksum === digits[9];\n}\n\n/**\n * Check if an input is a valid Canadian SIN (Social Insurance Number)\n *\n * The Social Insurance Number (SIN) is a 9 digit number that\n * you need to work in Canada or to have access to government programs and benefits.\n *\n * https://en.wikipedia.org/wiki/Social_Insurance_Number\n * https://www.canada.ca/en/employment-social-development/services/sin.html\n * https://www.codercrunch.com/challenge/819302488/sin-validator\n *\n * @param {string} input\n * @return {boolean}\n */\nfunction isCanadianSIN(input) {\n  var digitsArray = input.split('');\n  var even = digitsArray.filter(function (_, idx) {\n    return idx % 2;\n  }).map(function (i) {\n    return Number(i) * 2;\n  }).join('').split('');\n  var total = digitsArray.filter(function (_, idx) {\n    return !(idx % 2);\n  }).concat(even).map(function (i) {\n    return Number(i);\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  });\n  return total % 10 === 0;\n}\n\n/*\n * cs-CZ validation function\n * (Rodné číslo (RČ), persons only)\n * Checks if birth date (first six digits) is valid and divisibility by 11\n * Material not in DG TAXUD document sourced from:\n * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`\n * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`\n */\nfunction csCzCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n\n  // Extract full year from TIN length\n  var full_year = parseInt(tin.slice(0, 2), 10);\n  if (tin.length === 10) {\n    if (full_year < 54) {\n      full_year = \"20\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n  } else {\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n    if (full_year < 54) {\n      full_year = \"19\".concat(full_year);\n    } else {\n      return false; // No 18XX years seen in any of the resources\n    }\n  }\n  // Add missing zero if needed\n  if (full_year.length === 3) {\n    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');\n  }\n\n  // Extract month from TIN and normalize\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 50) {\n    month -= 50;\n  }\n  if (month > 20) {\n    // Month-plus-twenty was only introduced in 2004\n    if (parseInt(full_year, 10) < 2004) {\n      return false;\n    }\n    month -= 20;\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Verify divisibility by 11\n  if (tin.length === 10) {\n    if (parseInt(tin, 10) % 11 !== 0) {\n      // Some numbers up to and including 1985 are still valid if\n      // check (last) digit equals 0 and modulo of first 9 digits equals 10\n      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;\n      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {\n        if (parseInt(tin.slice(9), 10) !== 0) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n * de-AT validation function\n * (Abgabenkontonummer, persons/entities)\n * Verify TIN validity by calling luhnCheck()\n */\nfunction deAtCheck(tin) {\n  return algorithms.luhnCheck(tin);\n}\n\n/*\n * de-DE validation function\n * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)\n * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit\n * Partial implementation of spec (same result with both algorithms always)\n */\nfunction deDeCheck(tin) {\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n\n  // Fill array with strings of number positions\n  var occurences = [];\n  for (var i = 0; i < digits.length - 1; i++) {\n    occurences.push('');\n    for (var j = 0; j < digits.length - 1; j++) {\n      if (digits[i] === digits[j]) {\n        occurences[i] += j;\n      }\n    }\n  }\n\n  // Remove digits with one occurence and test for only one duplicate/triplicate\n  occurences = occurences.filter(function (a) {\n    return a.length > 1;\n  });\n  if (occurences.length !== 2 && occurences.length !== 3) {\n    return false;\n  }\n\n  // In case of triplicate value only two digits are allowed next to each other\n  if (occurences[0].length === 3) {\n    var trip_locations = occurences[0].split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var recurrent = 0; // Amount of neighbour occurences\n    for (var _i = 0; _i < trip_locations.length - 1; _i++) {\n      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {\n        recurrent += 1;\n      }\n    }\n    if (recurrent === 2) {\n      return false;\n    }\n  }\n  return algorithms.iso7064Check(tin);\n}\n\n/*\n * dk-DK validation function\n * (CPR-nummer (personnummer), persons only)\n * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,\n * and calculates check (last) digit\n */\nfunction dkDkCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n\n  // Extract year, check if valid for given century digit and add century\n  var year = parseInt(tin.slice(4, 6), 10);\n  var century_digit = tin.slice(6, 7);\n  switch (century_digit) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n      year = \"19\".concat(year);\n      break;\n    case '4':\n    case '9':\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else {\n        year = \"19\".concat(year);\n      }\n      break;\n    default:\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else if (year > 58) {\n        year = \"18\".concat(year);\n      } else {\n        return false;\n      }\n      break;\n  }\n  // Add missing zero if needed\n  if (year.length === 3) {\n    year = [year.slice(0, 2), '0', year.slice(2)].join('');\n  }\n  // Check date validity\n  var date = \"\".concat(year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 4;\n  // Multiply by weight and add to checksum\n  for (var i = 0; i < 9; i++) {\n    checksum += digits[i] * weight;\n    weight -= 1;\n    if (weight === 1) {\n      weight = 7;\n    }\n  }\n  checksum %= 11;\n  if (checksum === 1) {\n    return false;\n  }\n  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;\n}\n\n/*\n * el-CY validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)\n * Verify TIN validity by calculating ASCII value of check (last) character\n */\nfunction elCyCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.slice(0, 8).split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  // add digits in even places\n  for (var i = 1; i < digits.length; i += 2) {\n    checksum += digits[i];\n  }\n\n  // add digits in odd places\n  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {\n    if (digits[_i2] < 2) {\n      checksum += 1 - digits[_i2];\n    } else {\n      checksum += 2 * (digits[_i2] - 2) + 5;\n      if (digits[_i2] > 4) {\n        checksum += 2;\n      }\n    }\n  }\n  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);\n}\n\n/*\n * el-GR validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)\n * Verify TIN validity by calculating check (last) digit\n * Algorithm not in DG TAXUD document- sourced from:\n * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`\n */\nfunction elGrCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  for (var i = 0; i < 8; i++) {\n    checksum += digits[i] * Math.pow(2, 8 - i);\n  }\n  return checksum % 11 % 10 === digits[8];\n}\n\n/*\n * en-GB validation function (should go here if needed)\n * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),\n * persons/entities respectively)\n */\n\n/*\n * en-IE validation function\n * (Personal Public Service Number (PPS No), persons only)\n * Verify TIN validity by calculating check (second to last) character\n */\nfunction enIeCheck(tin) {\n  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8);\n  if (tin.length === 9 && tin[8] !== 'W') {\n    checksum += (tin[8].charCodeAt(0) - 64) * 9;\n  }\n  checksum %= 23;\n  if (checksum === 0) {\n    return tin[7].toUpperCase() === 'W';\n  }\n  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);\n}\n\n// Valid US IRS campus prefixes\nvar enUsCampusPrefix = {\n  andover: ['10', '12'],\n  atlanta: ['60', '67'],\n  austin: ['50', '53'],\n  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\n  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],\n  fresno: ['15', '24'],\n  internet: ['20', '26', '27', '45', '46', '47'],\n  kansas: ['40', '44'],\n  memphis: ['94', '95'],\n  ogden: ['80', '90'],\n  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\n  sba: ['31']\n};\n\n// Return an array of all US IRS campus prefixes\nfunction enUsGetPrefixes() {\n  var prefixes = [];\n  for (var location in enUsCampusPrefix) {\n    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n    // istanbul ignore else\n    if (enUsCampusPrefix.hasOwnProperty(location)) {\n      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));\n    }\n  }\n  return prefixes;\n}\n\n/*\n * en-US validation function\n * Verify that the TIN starts with a valid IRS campus prefix\n */\nfunction enUsCheck(tin) {\n  return enUsGetPrefixes().indexOf(tin.slice(0, 2)) !== -1;\n}\n\n/*\n * es-AR validation function\n * Clave Única de Identificación Tributaria (CUIT/CUIL)\n * Sourced from:\n * - https://servicioscf.afip.gob.ar/publico/abc/ABCpaso2.aspx?id_nivel1=3036&id_nivel2=3040&p=Conceptos%20b%C3%A1sicos\n * - https://es.wikipedia.org/wiki/Clave_%C3%9Anica_de_Identificaci%C3%B3n_Tributaria\n */\n\nfunction esArCheck(tin) {\n  var accum = 0;\n  var digits = tin.split('');\n  var digit = parseInt(digits.pop(), 10);\n  for (var i = 0; i < digits.length; i++) {\n    accum += digits[9 - i] * (2 + i % 6);\n  }\n  var verif = 11 - accum % 11;\n  if (verif === 11) {\n    verif = 0;\n  } else if (verif === 10) {\n    verif = 9;\n  }\n  return digit === verif;\n}\n\n/*\n * es-ES validation function\n * (Documento Nacional de Identidad (DNI)\n * or Número de Identificación de Extranjero (NIE), persons only)\n * Verify TIN validity by calculating check (last) character\n */\nfunction esEsCheck(tin) {\n  // Split characters into an array for further processing\n  var chars = tin.toUpperCase().split('');\n\n  // Replace initial letter if needed\n  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {\n    var lead_replace = 0;\n    switch (chars[0]) {\n      case 'Y':\n        lead_replace = 1;\n        break;\n      case 'Z':\n        lead_replace = 2;\n        break;\n      default:\n    }\n    chars.splice(0, 1, lead_replace);\n    // Fill with zeros if smaller than proper\n  } else {\n    while (chars.length < 9) {\n      chars.unshift(0);\n    }\n  }\n\n  // Calculate checksum and check according to lookup\n  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n  chars = chars.join('');\n  var checksum = parseInt(chars.slice(0, 8), 10) % 23;\n  return chars[8] === lookup[checksum];\n}\n\n/*\n * et-EE validation function\n * (Isikukood (IK), persons only)\n * Checks if birth date (century digit and six following) is valid and calculates check (last) digit\n * Material not in DG TAXUD document sourced from:\n * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`\n */\nfunction etEeCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(1, 3);\n  var century_digit = tin.slice(0, 1);\n  switch (century_digit) {\n    case '1':\n    case '2':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '3':\n    case '4':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 1;\n  // Multiply by weight and add to checksum\n  for (var i = 0; i < 10; i++) {\n    checksum += digits[i] * weight;\n    weight += 1;\n    if (weight === 10) {\n      weight = 1;\n    }\n  }\n  // Do again if modulo 11 of checksum is 10\n  if (checksum % 11 === 10) {\n    checksum = 0;\n    weight = 3;\n    for (var _i3 = 0; _i3 < 10; _i3++) {\n      checksum += digits[_i3] * weight;\n      weight += 1;\n      if (weight === 10) {\n        weight = 1;\n      }\n    }\n    if (checksum % 11 === 10) {\n      return digits[10] === 0;\n    }\n  }\n  return checksum % 11 === digits[10];\n}\n\n/*\n * fi-FI validation function\n * (Henkilötunnus (HETU), persons only)\n * Checks if birth date (first six digits plus century symbol) is valid\n * and calculates check (last) digit\n */\nfunction fiFiCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(4, 6);\n  var century_symbol = tin.slice(6, 7);\n  switch (century_symbol) {\n    case '+':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '-':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate check character\n  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;\n  if (checksum < 10) {\n    return checksum === parseInt(tin.slice(10), 10);\n  }\n  checksum -= 10;\n  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];\n  return letters_lookup[checksum] === tin.slice(10);\n}\n\n/*\n * fr/nl-BE validation function\n * (Numéro national (N.N.), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last two) digits\n */\nfunction frBeCheck(tin) {\n  // Zero month/day value is acceptable\n  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {\n    // Extract date from first six digits of TIN\n    var date = \"\".concat(tin.slice(0, 2), \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  }\n  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;\n  var checkdigits = parseInt(tin.slice(9, 11), 10);\n  if (checksum !== checkdigits) {\n    checksum = 97 - parseInt(\"2\".concat(tin.slice(0, 9)), 10) % 97;\n    if (checksum !== checkdigits) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n * fr-FR validation function\n * (Numéro fiscal de référence (numéro SPI), persons only)\n * Verify TIN validity by calculating check (last three) digits\n */\nfunction frFrCheck(tin) {\n  tin = tin.replace(/\\s/g, '');\n  var checksum = parseInt(tin.slice(0, 10), 10) % 511;\n  var checkdigits = parseInt(tin.slice(10, 13), 10);\n  return checksum === checkdigits;\n}\n\n/*\n * fr/lb-LU validation function\n * (numéro d’identification personnelle, persons only)\n * Verify birth date validity and run Luhn and Verhoeff checks\n */\nfunction frLuCheck(tin) {\n  // Extract date and check validity\n  var date = \"\".concat(tin.slice(0, 4), \"/\").concat(tin.slice(4, 6), \"/\").concat(tin.slice(6, 8));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Run Luhn check\n  if (!algorithms.luhnCheck(tin.slice(0, 12))) {\n    return false;\n  }\n  // Remove Luhn check digit and run Verhoeff check\n  return algorithms.verhoeffCheck(\"\".concat(tin.slice(0, 11)).concat(tin[12]));\n}\n\n/*\n * hr-HR validation function\n * (Osobni identifikacijski broj (OIB), persons/entities)\n * Verify TIN validity by calling iso7064Check(digits)\n */\nfunction hrHrCheck(tin) {\n  return algorithms.iso7064Check(tin);\n}\n\n/*\n * hu-HU validation function\n * (Adóazonosító jel, persons only)\n * Verify TIN validity by calculating check (last) digit\n */\nfunction huHuCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 8;\n  for (var i = 1; i < 9; i++) {\n    checksum += digits[i] * (i + 1);\n  }\n  return checksum % 11 === digits[9];\n}\n\n/*\n * lt-LT validation function (should go here if needed)\n * (Asmens kodas, persons/entities respectively)\n * Current validation check is alias of etEeCheck- same format applies\n */\n\n/*\n * it-IT first/last name validity check\n * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity\n * Due to lack of clarity between resources (\"Are only Italian consonants used?\n * What happens if a person has X in their name?\" etc.) only two test conditions\n * have been implemented:\n * Vowels may only be followed by other vowels or an X character\n * and X characters after vowels may only be followed by other X characters.\n */\nfunction itItNameCheck(name) {\n  // true at the first occurence of a vowel\n  var vowelflag = false;\n\n  // true at the first occurence of an X AFTER vowel\n  // (to properly handle last names with X as consonant)\n  var xflag = false;\n  for (var i = 0; i < 3; i++) {\n    if (!vowelflag && /[AEIOU]/.test(name[i])) {\n      vowelflag = true;\n    } else if (!xflag && vowelflag && name[i] === 'X') {\n      xflag = true;\n    } else if (i > 0) {\n      if (vowelflag && !xflag) {\n        if (!/[AEIOU]/.test(name[i])) {\n          return false;\n        }\n      }\n      if (xflag) {\n        if (!/X/.test(name[i])) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/*\n * it-IT validation function\n * (Codice fiscale (TIN-IT), persons only)\n * Verify name, birth date and codice catastale validity\n * and calculate check character.\n * Material not in DG-TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/Italian_fiscal_code`\n */\nfunction itItCheck(tin) {\n  // Capitalize and split characters into an array for further processing\n  var chars = tin.toUpperCase().split('');\n\n  // Check first and last name validity calling itItNameCheck()\n  if (!itItNameCheck(chars.slice(0, 3))) {\n    return false;\n  }\n  if (!itItNameCheck(chars.slice(3, 6))) {\n    return false;\n  }\n\n  // Convert letters in number spaces back to numbers if any\n  var number_locations = [6, 7, 9, 10, 12, 13, 14];\n  var number_replace = {\n    L: '0',\n    M: '1',\n    N: '2',\n    P: '3',\n    Q: '4',\n    R: '5',\n    S: '6',\n    T: '7',\n    U: '8',\n    V: '9'\n  };\n  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {\n    var i = _number_locations[_i4];\n    if (chars[i] in number_replace) {\n      chars.splice(i, 1, number_replace[chars[i]]);\n    }\n  }\n\n  // Extract month and day, and check date validity\n  var month_replace = {\n    A: '01',\n    B: '02',\n    C: '03',\n    D: '04',\n    E: '05',\n    H: '06',\n    L: '07',\n    M: '08',\n    P: '09',\n    R: '10',\n    S: '11',\n    T: '12'\n  };\n  var month = month_replace[chars[8]];\n  var day = parseInt(chars[9] + chars[10], 10);\n  if (day > 40) {\n    day -= 40;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(chars[6]).concat(chars[7], \"/\").concat(month, \"/\").concat(day);\n  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate check character by adding up even and odd characters as numbers\n  var checksum = 0;\n  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {\n    var char_to_int = parseInt(chars[_i5], 10);\n    if (isNaN(char_to_int)) {\n      char_to_int = chars[_i5].charCodeAt(0) - 65;\n    }\n    checksum += char_to_int;\n  }\n  var odd_convert = {\n    // Maps of characters at odd places\n    A: 1,\n    B: 0,\n    C: 5,\n    D: 7,\n    E: 9,\n    F: 13,\n    G: 15,\n    H: 17,\n    I: 19,\n    J: 21,\n    K: 2,\n    L: 4,\n    M: 18,\n    N: 20,\n    O: 11,\n    P: 3,\n    Q: 6,\n    R: 8,\n    S: 12,\n    T: 14,\n    U: 16,\n    V: 10,\n    W: 22,\n    X: 25,\n    Y: 24,\n    Z: 23,\n    0: 1,\n    1: 0\n  };\n  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {\n    var _char_to_int = 0;\n    if (chars[_i6] in odd_convert) {\n      _char_to_int = odd_convert[chars[_i6]];\n    } else {\n      var multiplier = parseInt(chars[_i6], 10);\n      _char_to_int = 2 * multiplier + 1;\n      if (multiplier > 4) {\n        _char_to_int += 2;\n      }\n    }\n    checksum += _char_to_int;\n  }\n  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {\n    return false;\n  }\n  return true;\n}\n\n/*\n * lv-LV validation function\n * (Personas kods (PK), persons only)\n * Check validity of birth date and calculate check (last) digit\n * Support only for old format numbers (not starting with '32', issued before 2017/07/01)\n * Material not in DG TAXUD document sourced from:\n * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`\n */\nfunction lvLvCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n  // Extract date from TIN\n  var day = tin.slice(0, 2);\n  if (day !== '32') {\n    // No date/checksum check if new format\n    var month = tin.slice(2, 4);\n    if (month !== '00') {\n      // No date check if unknown month\n      var full_year = tin.slice(4, 6);\n      switch (tin[6]) {\n        case '0':\n          full_year = \"18\".concat(full_year);\n          break;\n        case '1':\n          full_year = \"19\".concat(full_year);\n          break;\n        default:\n          full_year = \"20\".concat(full_year);\n          break;\n      }\n      // Check date validity\n      var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(day);\n      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n        return false;\n      }\n    }\n\n    // Calculate check digit\n    var checksum = 1101;\n    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n    for (var i = 0; i < tin.length - 1; i++) {\n      checksum -= parseInt(tin[i], 10) * multip_lookup[i];\n    }\n    return parseInt(tin[10], 10) === checksum % 11;\n  }\n  return true;\n}\n\n/*\n * mt-MT validation function\n * (Identity Card Number or Unique Taxpayer Reference, persons/entities)\n * Verify Identity Card Number structure (no other tests found)\n */\nfunction mtMtCheck(tin) {\n  if (tin.length !== 9) {\n    // No tests for UTR\n    var chars = tin.toUpperCase().split('');\n    // Fill with zeros if smaller than proper\n    while (chars.length < 8) {\n      chars.unshift(0);\n    }\n    // Validate format according to last character\n    switch (tin[7]) {\n      case 'A':\n      case 'P':\n        if (parseInt(chars[6], 10) === 0) {\n          return false;\n        }\n        break;\n      default:\n        {\n          var first_part = parseInt(chars.join('').slice(0, 5), 10);\n          if (first_part > 32000) {\n            return false;\n          }\n          var second_part = parseInt(chars.join('').slice(5, 7), 10);\n          if (first_part === second_part) {\n            return false;\n          }\n        }\n    }\n  }\n  return true;\n}\n\n/*\n * nl-NL validation function\n * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),\n * persons/entities respectively)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction nlNlCheck(tin) {\n  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11 === parseInt(tin[8], 10);\n}\n\n/*\n * pl-PL validation function\n * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n * or Numer identyfikacji podatkowej (NIP), persons/entities)\n * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit\n */\nfunction plPlCheck(tin) {\n  // NIP\n  if (tin.length === 10) {\n    // Calculate last digit by multiplying with lookup\n    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var _checksum = 0;\n    for (var i = 0; i < lookup.length; i++) {\n      _checksum += parseInt(tin[i], 10) * lookup[i];\n    }\n    _checksum %= 11;\n    if (_checksum === 10) {\n      return false;\n    }\n    return _checksum === parseInt(tin[9], 10);\n  }\n\n  // PESEL\n  // Extract full year using month\n  var full_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 80) {\n    full_year = \"18\".concat(full_year);\n    month -= 80;\n  } else if (month > 60) {\n    full_year = \"22\".concat(full_year);\n    month -= 60;\n  } else if (month > 40) {\n    full_year = \"21\".concat(full_year);\n    month -= 40;\n  } else if (month > 20) {\n    full_year = \"20\".concat(full_year);\n    month -= 20;\n  } else {\n    full_year = \"19\".concat(full_year);\n  }\n  // Add leading zero to month if needed\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate last digit by mulitplying with odd one-digit numbers except 5\n  var checksum = 0;\n  var multiplier = 1;\n  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {\n    checksum += parseInt(tin[_i7], 10) * multiplier % 10;\n    multiplier += 2;\n    if (multiplier > 10) {\n      multiplier = 1;\n    } else if (multiplier === 5) {\n      multiplier += 2;\n    }\n  }\n  checksum = 10 - checksum % 10;\n  return checksum === parseInt(tin[10], 10);\n}\n\n/*\n* pt-BR validation function\n* (Cadastro de Pessoas Físicas (CPF, persons)\n* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)\n* Both inputs will be validated\n*/\n\nfunction ptBrCheck(tin) {\n  if (tin.length === 11) {\n    var _sum;\n    var remainder;\n    _sum = 0;\n    if (\n    // Reject known invalid CPFs\n    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;\n    for (var i = 1; i <= 9; i++) _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;\n    _sum = 0;\n    for (var _i8 = 1; _i8 <= 10; _i8++) _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;\n    return true;\n  }\n  if (\n  // Reject know invalid CNPJs\n  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {\n    return false;\n  }\n  var length = tin.length - 2;\n  var identifiers = tin.substring(0, length);\n  var verificators = tin.substring(length);\n  var sum = 0;\n  var pos = length - 7;\n  for (var _i9 = length; _i9 >= 1; _i9--) {\n    sum += identifiers.charAt(length - _i9) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(0), 10)) {\n    return false;\n  }\n  length += 1;\n  identifiers = tin.substring(0, length);\n  sum = 0;\n  pos = length - 7;\n  for (var _i10 = length; _i10 >= 1; _i10--) {\n    sum += identifiers.charAt(length - _i10) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(1), 10)) {\n    return false;\n  }\n  return true;\n}\n\n/*\n * pt-PT validation function\n * (Número de identificação fiscal (NIF), persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction ptPtCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n  return checksum === parseInt(tin[8], 10);\n}\n\n/*\n * ro-RO validation function\n * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),\n * persons only)\n * Verify CNP validity by calculating check (last) digit (test not found for CIF)\n * Material not in DG TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/National_identification_number#Romania`\n */\nfunction roRoCheck(tin) {\n  if (tin.slice(0, 4) !== '9000') {\n    // No test found for this format\n    // Extract full year using century digit if possible\n    var full_year = tin.slice(1, 3);\n    switch (tin[0]) {\n      case '1':\n      case '2':\n        full_year = \"19\".concat(full_year);\n        break;\n      case '3':\n      case '4':\n        full_year = \"18\".concat(full_year);\n        break;\n      case '5':\n      case '6':\n        full_year = \"20\".concat(full_year);\n        break;\n      default:\n    }\n\n    // Check date validity\n    var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n    if (date.length === 8) {\n      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n        return false;\n      }\n    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n\n    // Calculate check digit\n    var digits = tin.split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var checksum = 0;\n    for (var i = 0; i < multipliers.length; i++) {\n      checksum += digits[i] * multipliers[i];\n    }\n    if (checksum % 11 === 10) {\n      return digits[12] === 1;\n    }\n    return digits[12] === checksum % 11;\n  }\n  return true;\n}\n\n/*\n * sk-SK validation function\n * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)\n * Checks validity of pre-1954 birth numbers (rodné číslo) only\n * Due to the introduction of the pseudo-random BIČ it is not possible to test\n * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand\n */\nfunction skSkCheck(tin) {\n  if (tin.length === 9) {\n    tin = tin.replace(/\\W/, '');\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n\n    // Extract full year from TIN length\n    var full_year = parseInt(tin.slice(0, 2), 10);\n    if (full_year > 53) {\n      return false;\n    }\n    if (full_year < 10) {\n      full_year = \"190\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n\n    // Extract month from TIN and normalize\n    var month = parseInt(tin.slice(2, 4), 10);\n    if (month > 50) {\n      month -= 50;\n    }\n    if (month < 10) {\n      month = \"0\".concat(month);\n    }\n\n    // Check date validity\n    var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n * sl-SI validation function\n * (Davčna številka, persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction slSiCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8) % 11;\n  if (checksum === 10) {\n    return parseInt(tin[7], 10) === 0;\n  }\n  return checksum === parseInt(tin[7], 10);\n}\n\n/*\n * sv-SE validation function\n * (Personnummer or samordningsnummer, persons only)\n * Checks validity of birth date and calls luhnCheck() to validate check (last) digit\n */\nfunction svSeCheck(tin) {\n  // Make copy of TIN and normalize to two-digit year form\n  var tin_copy = tin.slice(0);\n  if (tin.length > 11) {\n    tin_copy = tin_copy.slice(2);\n  }\n\n  // Extract date of birth\n  var full_year = '';\n  var month = tin_copy.slice(2, 4);\n  var day = parseInt(tin_copy.slice(4, 6), 10);\n  if (tin.length > 11) {\n    full_year = tin.slice(0, 4);\n  } else {\n    full_year = tin.slice(0, 2);\n    if (tin.length === 11 && day < 60) {\n      // Extract full year from centenarian symbol\n      // Should work just fine until year 10000 or so\n      var current_year = new Date().getFullYear().toString();\n      var current_century = parseInt(current_year.slice(0, 2), 10);\n      current_year = parseInt(current_year, 10);\n      if (tin[6] === '-') {\n        if (parseInt(\"\".concat(current_century).concat(full_year), 10) > current_year) {\n          full_year = \"\".concat(current_century - 1).concat(full_year);\n        } else {\n          full_year = \"\".concat(current_century).concat(full_year);\n        }\n      } else {\n        full_year = \"\".concat(current_century - 1).concat(full_year);\n        if (current_year - parseInt(full_year, 10) < 100) {\n          return false;\n        }\n      }\n    }\n  }\n\n  // Normalize day and check date validity\n  if (day > 60) {\n    day -= 60;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(day);\n  if (date.length === 8) {\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n  return algorithms.luhnCheck(tin.replace(/\\W/, ''));\n}\n\n/**\n * uk-UA validation function\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction ukUaCheck(tin) {\n  // Calculate check digit\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var multipliers = [-1, 5, 7, 9, 4, 6, 10, 5, 7];\n  var checksum = 0;\n  for (var i = 0; i < multipliers.length; i++) {\n    checksum += digits[i] * multipliers[i];\n  }\n  return checksum % 11 === 10 ? digits[9] === 0 : digits[9] === checksum % 11;\n}\n\n// Locale lookup objects\n\n/*\n * Tax id regex formats for various locales\n *\n * Where not explicitly specified in DG-TAXUD document both\n * uppercase and lowercase letters are acceptable.\n */\nvar taxIdFormat = {\n  'bg-BG': /^\\d{10}$/,\n  'cs-CZ': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'de-AT': /^\\d{9}$/,\n  'de-DE': /^[1-9]\\d{10}$/,\n  'dk-DK': /^\\d{6}-{0,1}\\d{4}$/,\n  'el-CY': /^[09]\\d{7}[A-Z]$/,\n  'el-GR': /^([0-4]|[7-9])\\d{8}$/,\n  'en-CA': /^\\d{9}$/,\n  'en-GB': /^\\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\\d{6}[ABCD ]$/i,\n  'en-IE': /^\\d{7}[A-W][A-IW]{0,1}$/i,\n  'en-US': /^\\d{2}[- ]{0,1}\\d{7}$/,\n  'es-AR': /(20|23|24|27|30|33|34)[0-9]{8}[0-9]/,\n  'es-ES': /^(\\d{0,8}|[XYZKLM]\\d{7})[A-HJ-NP-TV-Z]$/i,\n  'et-EE': /^[1-6]\\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\\d$/,\n  'fi-FI': /^\\d{6}[-+A]\\d{3}[0-9A-FHJ-NPR-Y]$/i,\n  'fr-BE': /^\\d{11}$/,\n  'fr-FR': /^[0-3]\\d{12}$|^[0-3]\\d\\s\\d{2}(\\s\\d{3}){3}$/,\n  // Conforms both to official spec and provided example\n  'fr-LU': /^\\d{13}$/,\n  'hr-HR': /^\\d{11}$/,\n  'hu-HU': /^8\\d{9}$/,\n  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,\n  'lv-LV': /^\\d{6}-{0,1}\\d{5}$/,\n  // Conforms both to DG TAXUD spec and original research\n  'mt-MT': /^\\d{3,7}[APMGLHBZ]$|^([1-8])\\1\\d{7}$/i,\n  'nl-NL': /^\\d{9}$/,\n  'pl-PL': /^\\d{10,11}$/,\n  'pt-BR': /(?:^\\d{11}$)|(?:^\\d{14}$)/,\n  'pt-PT': /^\\d{9}$/,\n  'ro-RO': /^\\d{13}$/,\n  'sk-SK': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'sl-SI': /^[1-9]\\d{7}$/,\n  'sv-SE': /^(\\d{6}[-+]{0,1}\\d{4}|(18|19|20)\\d{6}[-+]{0,1}\\d{4})$/,\n  'uk-UA': /^\\d{10}$/\n};\n// taxIdFormat locale aliases\ntaxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];\ntaxIdFormat['lt-LT'] = taxIdFormat['et-EE'];\ntaxIdFormat['nl-BE'] = taxIdFormat['fr-BE'];\ntaxIdFormat['fr-CA'] = taxIdFormat['en-CA'];\n\n// Algorithmic tax id check functions for various locales\nvar taxIdCheck = {\n  'bg-BG': bgBgCheck,\n  'cs-CZ': csCzCheck,\n  'de-AT': deAtCheck,\n  'de-DE': deDeCheck,\n  'dk-DK': dkDkCheck,\n  'el-CY': elCyCheck,\n  'el-GR': elGrCheck,\n  'en-CA': isCanadianSIN,\n  'en-IE': enIeCheck,\n  'en-US': enUsCheck,\n  'es-AR': esArCheck,\n  'es-ES': esEsCheck,\n  'et-EE': etEeCheck,\n  'fi-FI': fiFiCheck,\n  'fr-BE': frBeCheck,\n  'fr-FR': frFrCheck,\n  'fr-LU': frLuCheck,\n  'hr-HR': hrHrCheck,\n  'hu-HU': huHuCheck,\n  'it-IT': itItCheck,\n  'lv-LV': lvLvCheck,\n  'mt-MT': mtMtCheck,\n  'nl-NL': nlNlCheck,\n  'pl-PL': plPlCheck,\n  'pt-BR': ptBrCheck,\n  'pt-PT': ptPtCheck,\n  'ro-RO': roRoCheck,\n  'sk-SK': skSkCheck,\n  'sl-SI': slSiCheck,\n  'sv-SE': svSeCheck,\n  'uk-UA': ukUaCheck\n};\n// taxIdCheck locale aliases\ntaxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];\ntaxIdCheck['lt-LT'] = taxIdCheck['et-EE'];\ntaxIdCheck['nl-BE'] = taxIdCheck['fr-BE'];\ntaxIdCheck['fr-CA'] = taxIdCheck['en-CA'];\n\n// Regexes for locales where characters should be omitted before checking format\nvar allsymbols = /[-\\\\\\/!@#$%\\^&\\*\\(\\)\\+\\=\\[\\]]+/g;\nvar sanitizeRegexes = {\n  'de-AT': allsymbols,\n  'de-DE': /[\\/\\\\]/g,\n  'fr-BE': allsymbols\n};\n// sanitizeRegexes locale aliases\nsanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];\n\n/*\n * Validator function\n * Return true if the passed string is a valid tax identification number\n * for the specified locale.\n * Throw an error exception if the locale is not supported.\n */\nfunction isTaxID(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  (0, _assertString.default)(str);\n  // Copy TIN to avoid replacement if sanitized\n  var strcopy = str.slice(0);\n  if (locale in taxIdFormat) {\n    if (locale in sanitizeRegexes) {\n      strcopy = strcopy.replace(sanitizeRegexes[locale], '');\n    }\n    if (!taxIdFormat[locale].test(strcopy)) {\n      return false;\n    }\n    if (locale in taxIdCheck) {\n      return taxIdCheck[locale](strcopy);\n    }\n    // Fallthrough; not all locales have algorithmic checks\n    return true;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}